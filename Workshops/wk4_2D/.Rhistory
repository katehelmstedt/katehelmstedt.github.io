library(ggplot2)
library(devtools)
library(rwalkr)
library(ggmosaic)
install.packages("rwalkr")
install.packages("ggmosaic")
library(rwalkr)
library(ggmosaic)
library(dplyr)
library(grattan)
library(magrittr)
data()
class(mtcars)
class(orang)
class(orange)
class(Orange)
class(Titanic)
head(USArrests)
class(USArrests)
lobrary('coronavirus')
library(coronavirus)
install.packages("coronavirus")
library(coronavirus)
class(coronavirus)
head(coronavirus)
ggplot(data = mtcars, mapping = aes(x = as.factor(cyl))) +
geom_bar()
ggplot(data = coronavirus, mapping = aes(x = as.factor(Country.Region))) +
geom_bar()
install.packages("nCov2019")
library(rwalkr)
# Change the start_date and end_date to your birthday last year.
start_date <- as.Date("2018-08-30")
end_date <- as.Date("2018-08-31")
# Pull the pedestrian counts for your birthday last year
ped_walk <- melb_walk(from = start_date , to = end_date )
ped_walk
# Simple timeseries line
ggplot(data = subset(ped_walk, Sensor == "Melbourne Central")) +
geom_line(aes(x = Date_Time, y = Count))
## Stacked Area Plot 1
# DATASET: economics
ggplot(economics, aes(x=date)) +
geom_area(aes(y=pop, fill="pop")) +
geom_area(aes(y=unemploy, fill="unemploy")) +
labs(y="thousands")
## Stacked Area Plot 2
# DATASET: residential_property_prices
# Re-arrange the data
property <- residential_property_prices %>%
spread(City, Residential_property_price_index)
# Libraries
library(tidyverse)
library(hrbrthemes)
# Libraries
library(tidyverse)
library(hrbrthemes)
install.packages("hrbrthemes")
install.packages("hrbrthemes")
library(hrbrthemes)
library(hrbrthemes)
library(viridis)
library(patchwork)
install.packages("patchwork")
library(patchwork)
library(ggplot2)
# Dataset:
a <- data.frame( x=rnorm(20000, 10, 1.2), y=rnorm(20000, 10, 1.2), group=rep("A",20000))
b <- data.frame( x=rnorm(20000, 14.5, 1.2), y=rnorm(20000, 14.5, 1.2), group=rep("B",20000))
c <- data.frame( x=rnorm(20000, 9.5, 1.5), y=rnorm(20000, 15.5, 1.5), group=rep("C",20000))
synthetic_data <- do.call(rbind, list(a,b,c))
# Oveplotting is common and occurs when your dataset is too large.
# See the following scatterplot of the data we just created.
ggplot(synthetic_data, aes(x=x, y=y)) +
geom_point()
# Oveplotting is common and occurs when your dataset is too large.
# See the following scatterplot of the data we just created.
ggplot(synthetic_data, aes(x=x, y=y)) +
geom_point()
### 1. Dot size ###
ggplot(synthetic_data, aes(x=x, y=y)) +
geom_point(size = 0.2)
### 2. Transparency ###
ggplot(synthetic_data, aes(x=x, y=y)) +
geom_point(size = 0.2, alpha = 0.01)
install.packages("ggpointdensity")
library(ggpointdensity)
# Oveplotting is common and occurs when your dataset is too large.
# See the following scatterplot of the data we just created.
ggplot(synthetic_data, aes(x=x, y=y)) +
geom_pointdensity()
### 1. Dot size ###
ggplot(synthetic_data, aes(x=x, y=y)) +
geom_point(size = 0.2)
### 2. Transparency ###
ggplot(synthetic_data, aes(x=x, y=y)) +
geom_point(size = 0.2, alpha = 0.01)
# take a sample of the data
synthetic_data_subset <- sample_frac(synthetic_data, 0.05)
ggplot(synthetic_data_subset, aes(x=x, y=y)) +
geom_point(size=2)
### 4. Grouping with colour
ggplot(synthetic_data, aes(x=x, y=y, color=group)) +
geom_point( size=2, alpha=0.1) +
scale_color_viridis(discrete=TRUE)
### 5. Highlighting just one group ###
# This assumes there is a grouping variable in the data set.
ggplot(synthetic_data, aes(x=x, y=y)) +
geom_point(color="grey", size=2) +
geom_point(data = synthetic_data %>% filter(group=="B"), color="#69b3a2", size=2)
ggplot(ToothGrowth, aes(x = supp, y = len)) + geom_point()
ggplot(ToothGrowth, aes(x = supp, y = len)) + geom_point() + geom_jitter(width = 0.2)
# aes() within ggplot()
ggplot(mpg, aes(displ, hwy)) +
geom_point()
# aes() within geom_point()
ggplot(mpg) +
geom_point(aes(displ, hwy))
# aes() in both does not throw an error
ggplot(mpg, aes(displ, hwy)) +
geom_point(aes(displ, hwy))
# but it is bad! Look at this plot compared to the previous one -- what is going on??
ggplot(mpg, aes(displ, hwy)) +
geom_point(aes(displ, city))
# using ggtitle()
ggplot(synthetic_data_subset, aes(x = x, y = y)) +
geom_point() + ggtitle("Scatterplot of Some Synthetic Data")
# split title over two lines
ggplot(synthetic_data_subset, aes(x = x, y = y)) +
geom_point() + ggtitle("Scatterplot of Some \nSynthetic Data" )
# add a subtitle
ggplot(synthetic_data_subset, aes(x = x, y = y)) +
geom_point() + ggtitle("Scatterplot of Some Synthetic Data", subtitle = "This is a subtitle")
# use lab() - subtitles and captions
ggplot(synthetic_data_subset, aes(x = x, y = y)) +
geom_point() + labs(title = "Scatterplot of Some Synthetic Data", subtitle = "also a subtitle", caption = "labs() lets me add a caption but ggtitle() doesn't")
# centre title
ggplot(synthetic_data_subset, aes(x = x, y = y)) +
geom_point() + ggtitle("Scatterplot of Some Synthetic Data") +
theme(plot.title = element_text(hjust = 0.5 ))
# adjust text size, make bold, add a margin around title
ggplot(synthetic_data_subset, aes(x = x, y = y)) +
geom_point() + ggtitle("Scatterplot of Some Synthetic Data") +
theme(plot.title = element_text(hjust = 0.5, size = 20, face = "bold", margin = margin(10,0,10,0) ))
######### Legends
# We'll use the bar chart of the dummy data from last week.
# Create dummy data
specie=c(rep("sorgho" , 3) , rep("poacee" , 3) , rep("banana" , 3) , rep("triticum" , 3) )
rm(specie)
######### Legends
# We'll use the bar chart of the dummy data from last week.
# Create dummy data
species=c(rep("sorgho" , 3) , rep("poacee" , 3) , rep("banana" , 3) , rep("triticum" , 3) )
condition=rep(c("normal" , "stress" , "Nitrogen") , 4)
value=abs(rnorm(12 , 0 , 15))
dummy_data=data.frame(species,condition,value)
# For example
# First store it
test1 <- 3 + 4
# Then display it
test1
# Then use it
test1 + 5
# First store it
g <- ggplot(dummy_data, aes(fill=condition, y=value, x=specie)) +
geom_bar(position="dodge", stat="identity")
# Then display it
g
# First store it
g <- ggplot(dummy_data, aes(fill=condition, y=value, x=species)) +
geom_bar(position="dodge", stat="identity")
# Then display it
g
# turn off legend title
g + theme(legend.title = element_blank())
# Change legend colour, size and to bold
g + theme(legend.title = element_text(colour="chocolate", size=16, face="bold"))
# Change legend title
g + scale_fill_discrete(name = "This is a different \n legend title")
# everything together
ggplot(dummy_data, aes(fill=condition, y=value, x=specie)) +
geom_bar(position="dodge", stat="identity") +
theme(legend.title = element_text(colour="chocolate", size=16, face="bold")) +
scale_fill_discrete(name = "This is doing the same thing, \n but all together!")
# everything together
ggplot(dummy_data, aes(fill=condition, y=value, x=species)) +
geom_bar(position="dodge", stat="identity") +
theme(legend.title = element_text(colour="chocolate", size=16, face="bold")) +
scale_fill_discrete(name = "This is doing the same thing, \n but all together!")
# Axis labels
ggplot(ToothGrowth, aes(x = supp, y = len)) +
geom_point() +
labs(x = "Tooth Length", y = "Supplement Type")
# First store it
axis_labels <- ggplot(ToothGrowth, aes(x = supp, y = len)) +
geom_point() +
xlab("Supplement") +
ylab("Tooth Length")
# Then display it
axis_labels
axis_labels + theme(axis.text.x = element_text(angle = 50, size = 10, vjust = 0.5))
# change colour of axis title and labels
axis_labels + theme(
axis.text.x = element_text(angle = 50, size = 10, vjust = 0.5, colour = 'forestgreen'),
axis.title.x = element_text(colour = "blue"))
# Truncate axes
ggplot(midwest, aes(x=area, y=poptotal)) + geom_point() # no truncation
ggplot(midwest, aes(x=area, y=poptotal)) + geom_point() + ylim(0,2000000)
# change colour of axis title and labels
axis_labels + theme(
axis.text.x = element_text(angle = 50, size = 10, vjust = 0.5, colour = 'forestgreen'),
axis.title.x = element_text(colour = "blue"))
# Truncate axes
ggplot(midwest, aes(x=area, y=poptotal)) + geom_point() # no truncation
ggplot(midwest, aes(x=area, y=poptotal)) + geom_point() + ylim(0,2000000)
# Flip Axes (again -- a different dataset)
ggplot(mtcars, aes(x=as.factor(cyl))) +
geom_bar() +
coord_flip()
# Flip Axes (again -- a different dataset)
ggplot(mtcars, aes(x=as.factor(cyl))) +
geom_bar() +
coord_flip()
######### Dots
# to avoid extra typing, create an object called dots and assign the ggplot() function
# to it so that you just have to add the different geom layers.
dots <- ggplot(USArrests, aes(x = UrbanPop, y = Assault))
# colour
dots + geom_point(color="firebrick")
# colour
dots + geom_point(color="firebrick")
# transparency
dots + geom_point(alpha = 0.2)
# size
dots + geom_point(size = 5)
# shape
dots + geom_point(shape = 4) # add a shape name or a number for example 'cross' or '4'.
# All together
dots + geom_point(colour = "firebrick", size = 3, alpha = 0.5, shape = 5)
# Colour
ggplot(USArrests, aes(x = UrbanPop, y = Assault)) +
geom_point() # + theme(panel.background = element_rect(fill = 'grey75'))
# Grid lines
ggplot(USArrests, aes(UrbanPop, Assault)) +
geom_point() +
theme(panel.grid.major = element_line(colour = "yellow", size=2),
panel.grid.minor = element_line(colour = "blue"))
# Margins
ggplot(USArrests, aes(UrbanPop, Assault)) +
geom_point() +
theme(plot.background=element_rect(fill="darkseagreen"))
# all together
ggplot(USArrests, aes(UrbanPop, Assault)) +
geom_point() +
theme(panel.grid.major = element_line(colour = "yellow", size=2),
panel.grid.minor = element_line(colour = "purple"),
plot.background = element_rect(fill = "darkseagreen"))
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, color = Species)) +
geom_point() +
theme_bw()
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, color = Species)) +
geom_point() +
theme(text = element_text(size = 16))
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, color = Species)) +
geom_point() +
theme_fivethirtyeight()
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, color = Species)) +
geom_point() +
theme_economist()
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, color = Species)) +
geom_point() +
theme_excel()
######### Colours
library(RColorBrewer)
# map colour using aes() within ggplot() - outline colour
colour_outline <- ggplot(iris, aes(Species, Sepal.Length, colour = Species)) +
geom_boxplot()
# all together
ggplot(USArrests, aes(UrbanPop, Assault)) +
geom_point() +
theme(panel.grid.major = element_line(colour = "yellow", size=2),
panel.grid.minor = element_line(colour = "purple"),
plot.background = element_rect(fill = "darkseagreen"))
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, color = Species)) +
geom_point() +
theme_bw()
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, color = Species)) +
geom_point() +
theme(text = element_text(size = 16))
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, color = Species)) +
geom_point() +
theme_fivethirtyeight()
library(ggthemes)
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, color = Species)) +
geom_point() +
theme_fivethirtyeight()
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, color = Species)) +
geom_point() +
theme_economist()
# The theme from The Economist
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, color = Species)) +
geom_point() +
theme_economist()
# The theme from Excel (why?)
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, color = Species)) +
geom_point() +
theme_excel()
install.packages("xkcd")
library(xkcd)
######### Colours
library(RColorBrewer)
# map colour using aes() within ggplot() - outline colour
colour_outline <- ggplot(iris, aes(Species, Sepal.Length, colour = Species)) +
geom_boxplot()
colour_outline # note that I created `colour_outline` so we don't have to keep typing the ggplot() function over and over again.
# add colour using aes() within geom() - fill colour
colour_fill <- ggplot(iris, aes(Species, Sepal.Length)) +
geom_boxplot(aes(fill = Species))
colour_fill
# specify colour by adding  ` + scale_colour_manual` (outline) or `+ scale_fill_manual` (fill)
colour_outline + scale_colour_manual(values = c("#00AFBB", "#E7B800", "#FC4E07"))
colour_fill + scale_fill_manual(values = c("#00AFBB", "#E7B800", "#FC4E07"))
# specify colour using a palette. Here we use an existing palette. But you can also create your own.
colour_fill + scale_fill_brewer(palette = "Dark2")
colour_outline + scale_colour_brewer(palette = "Dark2") # see other palettes here - https://www.r-graph-gallery.com/38-rcolorbrewers-palettes/
ggplot(ToothGrowth, aes(x = supp, y = len)) + geom_point() + geom_jitter(width = 0.2) + scale_colour_gradient()
ggplot(USArrests, aes(x = UrbanPop, y = Assault)) +
geom_point() +
geom_hline(yintercept = 200) +
geom_vline(xintercept = 80)
######## Annotations: It can be useful to label individual observations, and groups.
# Replace the legend with in-text
irislabels <- iris %>%
group_by(Species) %>%
summarize_all(mean)
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, color = Species)) +
geom_point() + geom_text(data  = irislabels, aes(x=Sepal.Length, y=Sepal.Width, label = Species)) +
theme(legend.position = "none")
# Add a figure number
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, color = Species)) +
geom_point() + annotate("text", x=4.2, y=4.4, label = "A")
#########################
#########################
#      Assessment       #
## Go back to your plots from the assessment last week and re-design them using the theory from
## Go back to your plots from the assessment last week and re-design them using the theory from
## lectures and techniques from the workshop. In the .Rmd file for submission, for each question
## Go back to your plots from the assessment last week and re-design them using the theory from
## lectures and techniques from the workshop. In the .Rmd file for submission, for each question
## include your original image (from last week, with no consideration of encoding attributes)
install.packages("ncovid10")
install.packages("ncovid19")
install.packages("nCOV19")
install.packages("nCOV2019")
remotes::install_github(“GuangchuangYu/nCov2019”)
require(nCov2019)
require(dplyr)
remotes::install_github('GuangchuangYu/nCov2019')
library('nCOV2019')
require(nCov2019)
require(dplyr)
remotes::install_github('GuangchuangYu/nCov2019')
