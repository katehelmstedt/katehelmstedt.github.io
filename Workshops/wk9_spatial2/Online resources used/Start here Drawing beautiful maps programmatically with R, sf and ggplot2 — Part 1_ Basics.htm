<!DOCTYPE html>
<!-- saved from url=(0054)https://www.r-spatial.org/r/2018/10/25/ggplot2-sf.html -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><link rel="icon" type="image/png" href="https://avatars1.githubusercontent.com/u/25086656?s=280&amp;v=4">

  
  
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <title>Drawing beautiful maps programmatically with R, sf and ggplot2 — Part 1: Basics</title>
  <meta name="description" content="view raw Rmd">

  <link rel="stylesheet" href="./Drawing beautiful maps programmatically with R, sf and ggplot2 — Part 1_ Basics_files/main.css">
  <link rel="canonical" href="https://www.r-spatial.org//r/2018/10/25/ggplot2-sf.html">
  <link rel="alternate" type="application/rss+xml" title="r-spatial" href="https://www.r-spatial.org//rss.xml">
  <link rel="alternate" type="application/atom+xml" title="r-spatial" href="https://www.r-spatial.org//feed.xml">
<script async="" src="./Drawing beautiful maps programmatically with R, sf and ggplot2 — Part 1_ Basics_files/analytics.js"></script><script src="./Drawing beautiful maps programmatically with R, sf and ggplot2 — Part 1_ Basics_files/embed.js" data-timestamp="1556243715996"></script><link rel="preload" as="style" href="https://c.disquscdn.com/next/embed/styles/lounge.694ea7181ea49f1ce306dfc00c532f53.css"><link rel="preload" as="script" href="https://c.disquscdn.com/next/embed/common.bundle.2b6bb3725200b8d992a8cb9c288952d3.js"><link rel="preload" as="script" href="https://c.disquscdn.com/next/embed/lounge.bundle.e04d6946f2fad54035486025e9a4979a.js"><link rel="preload" as="script" href="https://disqus.com/next/config.js"><script src="./Drawing beautiful maps programmatically with R, sf and ggplot2 — Part 1_ Basics_files/alfalfa_min.d078e4f2a4721192a99e02601a767617.js" async="" charset="UTF-8"></script></head>


  <body>

    <header class="site-header">

  <div class="wrapper">

    <a class="site-title" href="https://www.r-spatial.org/">r-spatial</a>
	<a href="https://github.com/edzer/r-spatial/blob/gh-pages/_rmd/logo.R">
	<img src="./Drawing beautiful maps programmatically with R, sf and ggplot2 — Part 1_ Basics_files/logo.png" alt="" style="margin:2px 65px">
	</a>

    <nav class="site-nav">
      <a href="https://www.r-spatial.org/r/2018/10/25/ggplot2-sf.html#" class="menu-icon">
        <svg viewBox="0 0 18 15">
          <path fill="#424242" d="M18,1.484c0,0.82-0.665,1.484-1.484,1.484H1.484C0.665,2.969,0,2.304,0,1.484l0,0C0,0.665,0.665,0,1.484,0 h15.031C17.335,0,18,0.665,18,1.484L18,1.484z"></path>
          <path fill="#424242" d="M18,7.516C18,8.335,17.335,9,16.516,9H1.484C0.665,9,0,8.335,0,7.516l0,0c0-0.82,0.665-1.484,1.484-1.484 h15.031C17.335,6.031,18,6.696,18,7.516L18,7.516z"></path>
          <path fill="#424242" d="M18,13.516C18,14.335,17.335,15,16.516,15H1.484C0.665,15,0,14.335,0,13.516l0,0 c0-0.82,0.665-1.484,1.484-1.484h15.031C17.335,12.031,18,12.696,18,13.516L18,13.516z"></path>
        </svg>
      </a>

      <div class="trigger">
        
          
          <a class="page-link" href="https://www.r-spatial.org/events/">Events</a>
          
        
          
          <a class="page-link" href="https://www.r-spatial.org/projects/">Projects</a>
          
        
          
          <a class="page-link" href="https://www.r-spatial.org/book/">Book</a>
          
        
          
          <a class="page-link" href="https://www.r-spatial.org/about/">About</a>
          
        
          
        
          
        
          
        
          
        
          
        
          
        
      </div>
    </nav>

  </div>

</header>


    <div class="page-content">
      <div class="wrapper">
        <article class="post" itemscope="" itemtype="http://schema.org/BlogPosting">

  <header class="post-header">
    <h1 class="post-title" itemprop="name headline">Drawing beautiful maps programmatically with R, sf and ggplot2 — Part 1: Basics</h1>
    <p class="post-meta"><time datetime="2018-10-25T00:00:00+00:00" itemprop="datePublished">Oct 25, 2018</time> • <span itemprop="author" itemscope="" itemtype="http://schema.org/Person"><span itemprop="name">Mel Moreno and Mathieu Basille</span></span></p>
  </header>

  <div class="post-content" itemprop="articleBody">
    <p><a href="https://raw.githubusercontent.com/r-spatial/r-spatial.org/gh-pages/_rmd/2018-10-02-ggplot2-sf.Rmd">view raw Rmd</a></p>

<p><em>EDIT: Following a suggestion Adriano Fantini and code from Andy South, we replaced <code class="highlighter-rouge">rworlmap</code> by <code class="highlighter-rouge">rnaturalearth</code>.</em></p>

<p>This tutorial is the first part in a series of three:</p>

<ul>
  <li>General concepts illustrated with the world Map (this document)</li>
  <li><a href="https://www.r-spatial.org/r/2018/10/25/ggplot2-sf-2.html">Adding additional layers: an example with points and polygons</a></li>
  <li><a href="https://www.r-spatial.org/r/2018/10/25/ggplot2-sf-3.html">Positioning and layout for complex maps</a></li>
</ul>

<p>In this part, we will cover the fundamentals of mapping using <code class="highlighter-rouge">ggplot2</code>
associated to <code class="highlighter-rouge">sf</code>, and presents the basics elements and parameters we
can play with to prepare a map.</p>

<p>Maps are used in a variety of fields to express data in an appealing and
interpretive way. Data can be expressed into simplified patterns, and
this data interpretation is generally lost if the data is only seen
through a spread sheet. Maps can add vital context by incorporating many
variables into an easy to read and applicable context. Maps are also
very important in the information world because they can quickly allow
the public to gain better insight so that they can stay informed. It’s
critical to have maps be effective, which means creating maps that can
be easily understood by a given audience. For instance, maps that need
to be understood by children would be very different from maps intended
to be shown to geographers.</p>

<p>Knowing what elements are required to enhance your data is key into
making effective maps. Basic elements of a map that should be considered
are polygon, points, lines, and text. Polygons, on a map, are closed
shapes such as country borders. Lines are considered to be linear shapes
that are not filled with any aspect, such as highways, streams, or
roads. Finally, points are used to specify specific positions, such as
city or landmark locations. With that in mind, one need to think about
what elements are required in the map to really make an impact, and
convey the information for the intended audience. Layout and formatting
are the second critical aspect to enhance data visually. The arrangement
of these map elements and how they will be drawn can be adjusted to make
a maximum impact.</p>

<h2 id="a-solution-using-r-and-its-ecosystem-of-packages">A solution using R and its ecosystem of packages</h2>

<p>Current solutions for creating maps usually involves GIS software, such
as ArcGIS, QGIS, eSpatial, etc., which allow to visually prepare a map,
in the same approach as one would prepare a poster or a document layout.
On the other hand, R, a free and open-source software development
environment (IDE) that is used for computing statistical data and
graphic in a programmable language, has developed advanced spatial
capabilities over the years, and can be used to draw maps
programmatically.</p>

<p>R is a powerful and flexible tool. R can be used from calculating data
sets to creating graphs and maps with the same data set. R is also free,
which makes it easily accessible to anyone. Some other advantages of
using R is that it has an interactive language, data structures,
graphics availability, a developed community, and the advantage of
adding more functionalities through an entire ecosystem of packages. R
is a scriptable language that allows the user to write out a code in
which it will execute the commands specified.</p>

<p>Using R to create maps brings these benefits to mapping. Elements of a
map can be added or removed with ease — R code can be tweaked to make
major enhancements with a stroke of a key. It is also easy to reproduce
the same maps for different data sets. It is important to be able to
script the elements of a map, so that it can be re-used and interpreted
by any user. In essence, comparing typical GIS software and R for
drawing maps is similar to comparing word processing software (e.g.
Microsoft Office or LibreOffice) and a programmatic typesetting system
such as LaTeX, in that typical GIS software implement a WYSIWIG approach
(“What You See Is What You Get”), while R implements a WYSIWYM approach
(“What You See Is What You Mean”).</p>

<p>The package <code class="highlighter-rouge">ggplot2</code> implements the grammar of graphics in R, as a way
to create code that make sense to the user: The grammar of graphics is a
term used to breaks up graphs into semantic components, such as
geometries and layers. Practically speaking, it allows (and forces!) the
user to focus on graph elements at a higher level of abstraction, and
how the data must be structured to achieve the expected outcome. While
<code class="highlighter-rouge">ggplot2</code> is becoming the de facto standard for R graphs, it does not
handle spatial data specifically. The current state-of-the-art of
spatial objects in R relies on <code class="highlighter-rouge">Spatial</code> classes defined in the package
<a href="https://cran.r-project.org/package=sp"><code class="highlighter-rouge">sp</code></a>, but the new package
<a href="https://cran.r-project.org/package=sf"><code class="highlighter-rouge">sf</code></a> has recently implemented
the “simple feature” standard, and is steadily taking over <code class="highlighter-rouge">sp</code>.
Recently, the package <code class="highlighter-rouge">ggplot2</code> has allowed the use of simple features
from the package <code class="highlighter-rouge">sf</code> as layers in a graph<sup id="fnref:1"><a href="https://www.r-spatial.org/r/2018/10/25/ggplot2-sf.html#fn:1" class="footnote">1</a></sup>. The combination of
<code class="highlighter-rouge">ggplot2</code> and <code class="highlighter-rouge">sf</code> therefore enables to programmatically create maps,
using the grammar of graphics, just as informative or visually appealing
as traditional GIS software.</p>

<h2 id="getting-started">Getting started</h2>

<p>Many R packages are available from <a href="https://cran.r-project.org/">CRAN</a>,
the Comprehensive R Archive Network, which is the primary repository of
R packages. The full list of packages necessary for this series of
tutorials can be installed with:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>install.packages(c("cowplot", "googleway", "ggplot2", "ggrepel", 
"ggspatial", "libwgeom", "sf", "rnaturalearth", "rnaturalearthdata")
</code></pre></div></div>

<p>We start by loading the basic packages necessary for all maps, i.e.
<code class="highlighter-rouge">ggplot2</code> and <code class="highlighter-rouge">sf</code>. We also suggest to use the classic dark-on-light
theme for <code class="highlighter-rouge">ggplot2</code> (<code class="highlighter-rouge">theme_bw</code>), which is appropriate for maps:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>library("ggplot2")
theme_set(theme_bw())
library("sf")
</code></pre></div></div>

<p>The package <code class="highlighter-rouge">rnaturalearth</code> provides a map of countries of the entire
world. Use <code class="highlighter-rouge">ne_countries</code> to pull country data and choose the scale
(<code class="highlighter-rouge">rnaturalearthhires</code> is necessary for <code class="highlighter-rouge">scale = "large"</code>). The
function can return <code class="highlighter-rouge">sp</code> classes (default) or directly <code class="highlighter-rouge">sf</code> classes,
as defined in the argument <code class="highlighter-rouge">returnclass</code>:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>library("rnaturalearth")
library("rnaturalearthdata")

world &lt;- ne_countries(scale = "medium", returnclass = "sf")
class(world)

## [1] "sf"  
## [1] "data.frame"
</code></pre></div></div>

<h1 id="general-concepts-illustrated-with-the-world-map">General concepts illustrated with the world map</h1>

<h2 id="data-and-basic-plot-ggplot-and-geom_sf">Data and basic plot (<code class="highlighter-rouge">ggplot</code> and <code class="highlighter-rouge">geom_sf</code>)</h2>

<p>First, let us start with creating a base map of the world using
<code class="highlighter-rouge">ggplot2</code>. This base map will then be extended with different map
elements, as well as zoomed in to an area of interest. We can check that
the world map was properly retrieved and converted into an <code class="highlighter-rouge">sf</code> object,
and plot it with <code class="highlighter-rouge">ggplot2</code>:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ggplot(data = world) +
    geom_sf()
</code></pre></div></div>

<p><img src="./Drawing beautiful maps programmatically with R, sf and ggplot2 — Part 1_ Basics_files/world-plot-1.png" width="90%"></p>

<p>This call nicely introduces the structure of a <code class="highlighter-rouge">ggplot</code> call: The first
part <code class="highlighter-rouge">ggplot(data = world)</code> initiates the <code class="highlighter-rouge">ggplot</code> graph, and indicates
that the main data is stored in the <code class="highlighter-rouge">world</code> object. The line ends up
with a <code class="highlighter-rouge">+</code> sign, which indicates that the call is not complete yet, and
each subsequent line correspond to another layer or scale. In this case,
we use the <code class="highlighter-rouge">geom_sf</code> function, which simply adds a geometry stored in a
<code class="highlighter-rouge">sf</code> object. By default, all geometry functions use the main data
defined in <code class="highlighter-rouge">ggplot()</code>, but we will see later how to provide additional
data.</p>

<p>Note that layers are added one at a time in a <code class="highlighter-rouge">ggplot</code> call, so the
order of each layer is very important. All data will have to be in an
<code class="highlighter-rouge">sf</code> format to be used by <code class="highlighter-rouge">ggplot2</code>; data in other formats (e.g. classes
from <code class="highlighter-rouge">sp</code>) will be manually converted to <code class="highlighter-rouge">sf</code> classes if necessary.</p>

<h2 id="title-subtitle-and-axis-labels-ggtitle-xlab-ylab">Title, subtitle, and axis labels (<code class="highlighter-rouge">ggtitle</code>, <code class="highlighter-rouge">xlab</code>, <code class="highlighter-rouge">ylab</code>)</h2>

<p>A title and a subtitle can be added to the map using the function
<code class="highlighter-rouge">ggtitle</code>, passing any valid character string (e.g. with quotation
marks) as arguments. Axis names are absent by default on a map, but can
be changed to something more suitable (e.g. “Longitude” and “Latitude”),
depending on the map:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ggplot(data = world) +
    geom_sf() +
    xlab("Longitude") + ylab("Latitude") +
    ggtitle("World map", subtitle = paste0("(", length(unique(world$NAME)), " countries)"))
</code></pre></div></div>

<p><img src="./Drawing beautiful maps programmatically with R, sf and ggplot2 — Part 1_ Basics_files/world-title-1.png" width="90%"></p>

<h2 id="map-color-geom_sf">Map color (<code class="highlighter-rouge">geom_sf</code>)</h2>

<p>In many ways, <code class="highlighter-rouge">sf</code> geometries are no different than regular geometries,
and can be displayed with the same level of control on their attributes.
Here is an example with the polygons of the countries filled with a
green color (argument <code class="highlighter-rouge">fill</code>), using black for the outline of the
countries (argument <code class="highlighter-rouge">color</code>):</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ggplot(data = world) + 
    geom_sf(color = "black", fill = "lightgreen")
</code></pre></div></div>

<p><img src="./Drawing beautiful maps programmatically with R, sf and ggplot2 — Part 1_ Basics_files/world-colors-1.png" width="90%"></p>

<p>The package <code class="highlighter-rouge">ggplot2</code> allows the use of more complex color schemes, such
as a gradient on one variable of the data. Here is another example that
shows the population of each country. In this example, we use the
“viridis” colorblind-friendly palette for the color gradient (with
<code class="highlighter-rouge">option = "plasma"</code> for the plasma variant), using the square root of
the population (which is stored in the variable <code class="highlighter-rouge">POP_EST</code> of the <code class="highlighter-rouge">world</code>
object):</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ggplot(data = world) +
    geom_sf(aes(fill = pop_est)) +
    scale_fill_viridis_c(option = "plasma", trans = "sqrt")
</code></pre></div></div>

<p><img src="./Drawing beautiful maps programmatically with R, sf and ggplot2 — Part 1_ Basics_files/world-colors-pop-1.png" width="90%"></p>

<h2 id="projection-and-extent-coord_sf">Projection and extent (<code class="highlighter-rouge">coord_sf</code>)</h2>

<p>The function <code class="highlighter-rouge">coord_sf</code> allows to deal with the coordinate system, which
includes both projection and extent of the map. By default, the map will
use the coordinate system of the first layer that defines one (i.e.
scanned in the order provided), or if none, fall back on WGS84
(latitude/longitude, the reference system used in GPS). Using the
argument <code class="highlighter-rouge">crs</code>, it is possible to override this setting, and project on
the fly to any projection. This can be achieved using any valid PROJ4
string (here, the European-centric ETRS89 Lambert Azimuthal Equal-Area
projection):</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ggplot(data = world) +
    geom_sf() +
    coord_sf(crs = "+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +units=m +no_defs ")
</code></pre></div></div>

<p><img src="./Drawing beautiful maps programmatically with R, sf and ggplot2 — Part 1_ Basics_files/world-coord-1.png" width="65%"></p>

<p>Spatial Reference System Identifier (SRID) or an European Petroleum
Survey Group (EPSG) code are available for the projection of interest,
they can be used directly instead of the full PROJ4 string. The two
following calls are equivalent for the ETRS89 Lambert Azimuthal
Equal-Area projection, which is EPSG code 3035:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ggplot(data = world) +
    geom_sf() +
    coord_sf(crs = "+init=epsg:3035")

ggplot(data = world) +
    geom_sf() +
    coord_sf(crs = st_crs(3035))
</code></pre></div></div>

<p>The extent of the map can also be set in <code class="highlighter-rouge">coord_sf</code>, in practice
allowing to “zoom” in the area of interest, provided by limits on the
x-axis (<code class="highlighter-rouge">xlim</code>), and on the y-axis (<code class="highlighter-rouge">ylim</code>). Note that the limits are
automatically expanded by a fraction to ensure that data and axes don’t
overlap; it can also be turned off to exactly match the limits provided
with <code class="highlighter-rouge">expand = FALSE</code>:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ggplot(data = world) +
    geom_sf() +
    coord_sf(xlim = c(-102.15, -74.12), ylim = c(7.65, 33.97), expand = FALSE)
</code></pre></div></div>

<p><img src="./Drawing beautiful maps programmatically with R, sf and ggplot2 — Part 1_ Basics_files/world-zoom-1.png" width="65%"></p>

<h2 id="scale-bar-and-north-arrow-package-ggspatial">Scale bar and North arrow (package <code class="highlighter-rouge">ggspatial</code>)</h2>

<p>Several packages are available to create a scale bar on a map (e.g.
<code class="highlighter-rouge">prettymapr</code>, <code class="highlighter-rouge">vcd</code>, <code class="highlighter-rouge">ggsn</code>, or <code class="highlighter-rouge">legendMap</code>). We introduce here the
package <code class="highlighter-rouge">ggspatial</code>, which provides easy-to-use functions…</p>

<p><code class="highlighter-rouge">scale_bar</code> that allows to add simultaneously the north symbol and a
scale bar into the <code class="highlighter-rouge">ggplot</code> map. Five arguments need to be set manually:
<code class="highlighter-rouge">lon</code>, <code class="highlighter-rouge">lat</code>, <code class="highlighter-rouge">distance_lon</code>, <code class="highlighter-rouge">distance_lat</code>, and <code class="highlighter-rouge">distance_legend</code>. The
location of the scale bar has to be specified in longitude/latitude in
the <code class="highlighter-rouge">lon</code> and <code class="highlighter-rouge">lat</code> arguments. The shaded distance inside the scale bar
is controlled by the <code class="highlighter-rouge">distance_lon</code> argument. while its width is
determined by <code class="highlighter-rouge">distance_lat</code>. Additionally, it is possible to change the
font size for the legend of the scale bar (argument <code class="highlighter-rouge">legend_size</code>, which
defaults to 3). The North arrow behind the “N” north symbol can also be
adjusted for its length (<code class="highlighter-rouge">arrow_length</code>), its distance to the scale
(<code class="highlighter-rouge">arrow_distance</code>), or the size the N north symbol itself
(<code class="highlighter-rouge">arrow_north_size</code>, which defaults to 6). Note that all distances
(<code class="highlighter-rouge">distance_lon</code>, <code class="highlighter-rouge">distance_lat</code>, <code class="highlighter-rouge">distance_legend</code>, <code class="highlighter-rouge">arrow_length</code>,
<code class="highlighter-rouge">arrow_distance</code>) are set to <code class="highlighter-rouge">"km"</code> by default in <code class="highlighter-rouge">distance_unit</code>; they
can also be set to nautical miles with “nm”, or miles with “mi”.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>library("ggspatial")
ggplot(data = world) +
    geom_sf() +
    annotation_scale(location = "bl", width_hint = 0.5) +
    annotation_north_arrow(location = "bl", which_north = "true", 
        pad_x = unit(0.75, "in"), pad_y = unit(0.5, "in"),
        style = north_arrow_fancy_orienteering) +
    coord_sf(xlim = c(-102.15, -74.12), ylim = c(7.65, 33.97))

## Scale on map varies by more than 10%, scale bar may be inaccurate
</code></pre></div></div>

<p><img src="./Drawing beautiful maps programmatically with R, sf and ggplot2 — Part 1_ Basics_files/world-scale-north-1.png" width="65%"></p>

<p>Note the warning of the inaccurate scale bar: since the map use
unprojected data in longitude/latitude (WGS84) on an equidistant
cylindrical projection (all meridians being parallel), length in
(kilo)meters on the map directly depends mathematically on the degree of
latitude. Plots of small regions or projected data will often allow for
more accurate scale bars.</p>

<h2 id="country-names-and-other-names-geom_text-and-annotate">Country names and other names (<code class="highlighter-rouge">geom_text</code> and <code class="highlighter-rouge">annotate</code>)</h2>

<p>The <code class="highlighter-rouge">world</code> data set already contains country names and the coordinates
of the centroid of each country (among more information). We can use
this information to plot country names, using <code class="highlighter-rouge">world</code> as a regular
<code class="highlighter-rouge">data.frame</code> in <code class="highlighter-rouge">ggplot2</code>. The function <code class="highlighter-rouge">geom_text</code> can be used to add a layer of text to a map using geographic coordinates. The function requires the data needed to enter the country names, which is the same data as the world map. Again, we have a very flexible control to adjust the text at will on many
aspects:</p>

<ul>
  <li>The size (argument <code class="highlighter-rouge">size</code>);</li>
  <li>The alignment, which is centered by default on the coordinates
provided. The text can be adjusted horizontally or vertically using
the arguments <code class="highlighter-rouge">hjust</code> and <code class="highlighter-rouge">vjust</code>, which can either be a number
between 0 (right/bottom) and 1 (top/left) or a character (“left”,
“middle”, “right”, “bottom”, “center”, “top”). The text can also be
offset horizontally or vertically with the argument <code class="highlighter-rouge">nudge_x</code> and
<code class="highlighter-rouge">nudge_y</code>;</li>
  <li>The font of the text, for instance its color (argument <code class="highlighter-rouge">color</code>) or
the type of font (<code class="highlighter-rouge">fontface</code>);</li>
  <li>The overlap of labels, using the argument <code class="highlighter-rouge">check_overlap</code>, which
removes overlapping text. Alternatively, when there is a lot of
overlapping labels, the package <code class="highlighter-rouge">ggrepel</code> provides a
<code class="highlighter-rouge">geom_text_repel</code> function that moves label around so that they do
not overlap.</li>
  <li>For the text labels, we are defining the centroid of the counties with <code class="highlighter-rouge">st_centroid</code>, from the package <code class="highlighter-rouge">sf</code>. Then we combined the coordinates with the centroid, in the           <code class="highlighter-rouge">geometry</code> of the spatial data frame. The package <code class="highlighter-rouge">sf</code> is necessary for the command <code class="highlighter-rouge">st_centroid</code>.</li>
</ul>

<p>Additionally, the <code class="highlighter-rouge">annotate</code> function can be used to add a single character string at a specific location, as demonstrated here to add the Gulf of Mexico:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>library("sf")
world_points&lt;- st_centroid(world)
world_points &lt;- cbind(world, st_coordinates(st_centroid(world$geometry)))

ggplot(data = world) +
geom_sf() +
geom_text(data= world_points,aes(x=X, y=Y, label=name),
    color = "darkblue", fontface = "bold", check_overlap = FALSE) +
annotate(geom = "text", x = -90, y = 26, label = "Gulf of Mexico", 
    fontface = "italic", color = "grey22", size = 6) +
coord_sf(xlim = c(-102.15, -74.12), ylim = c(7.65, 33.97), expand = FALSE)
</code></pre></div></div>

<p><img src="./Drawing beautiful maps programmatically with R, sf and ggplot2 — Part 1_ Basics_files/world-country-1.png" width="65%"></p>

<h1 id="final-map">Final map</h1>

<p>Now to make the final touches, the theme of the map can be edited to
make it more appealing. We suggested the use of <code class="highlighter-rouge">theme_bw</code> for a
standard theme, but there are many other themes that can be selected
from (see for instance <code class="highlighter-rouge">?ggtheme</code> in <code class="highlighter-rouge">ggplot2</code>, or the package
<a href="https://cran.r-project.org/package=ggthemes"><code class="highlighter-rouge">ggthemes</code></a> which provide
several useful themes). Moreover, specific theme elements can be tweaked
to get to the final outcome:</p>

<ul>
  <li>Position of the legend: Although not used in this example, the
argument <code class="highlighter-rouge">legend.position</code> allows to automatically place the legend
at a specific location (e.g. <code class="highlighter-rouge">"topright"</code>, <code class="highlighter-rouge">"bottomleft"</code>, etc.);</li>
  <li>Grid lines (graticules) on the map: by using <code class="highlighter-rouge">panel.grid.major</code> and
<code class="highlighter-rouge">panel.grid.minor</code>, grid lines can be adjusted. Here we set them to
a gray color and dashed line type to clearly distinguish them from
country borders lines;</li>
  <li>Map background: the argument <code class="highlighter-rouge">panel.background</code> can be used to color
the background, which is the ocean essentially, with a light blue;</li>
  <li>
    <p>Many more elements of a theme can be adjusted, which would be too
long to cover here. We refer the reader to the documentation for the
function <code class="highlighter-rouge">theme</code>.</p>

    <p>ggplot(data = world) +
  geom_sf(fill= “antiquewhite”) +
  geom_text(data= world_points,aes(x=X, y=Y, label=name),
    color = “darkblue”, fontface = “bold”, check_overlap = FALSE) +
  annotate(geom = “text”, x = -90, y = 26, label = “Gulf of Mexico”, 
    fontface = “italic”, color = “grey22”, size = 6) +
  annotation_scale(location = “bl”, width_hint = 0.5) +
  annotation_north_arrow(location = “bl”, which_north = “true”, 
    pad_x = unit(0.75, “in”), pad_y = unit(0.5, “in”),
    style = north_arrow_fancy_orienteering) +
  coord_sf(xlim = c(-102.15, -74.12), ylim = c(7.65, 33.97), expand = FALSE) +
  xlab(“Longitude”) + ylab(“Latitude”) +
  ggtitle(“Map of the Gulf of Mexico and the Caribbean Sea”) +
  theme(panel.grid.major = element_line(color = gray(.5),
    linetype = “dashed”, size = 0.5),
    panel.background = element_rect(fill = “aliceblue”))</p>
  </li>
</ul>

<p><img src="./Drawing beautiful maps programmatically with R, sf and ggplot2 — Part 1_ Basics_files/world-florida-final-1.png" width="65%"></p>

<h2 id="saving-the-map-with-ggsave">Saving the map with <code class="highlighter-rouge">ggsave</code></h2>

<p>The final map now ready, it is very easy to save it using <code class="highlighter-rouge">ggsave</code>. This
function allows a graphic (typically the last plot displayed) to be
saved in a variety of formats, including the most common PNG (raster
bitmap) and PDF (vector graphics), with control over the size and
resolution of the outcome. For instance here, we save a PDF version of
the map, which keeps the best quality, and a PNG version of it for web
purposes:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ggsave("map.pdf")
ggsave("map_web.png", width = 6, height = 6, dpi = "screen")
</code></pre></div></div>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>Note: Support of <code class="highlighter-rouge">sf</code> objects is available since version 3.0.0 of
<code class="highlighter-rouge">ggplot2</code>, recently released on CRAN.&nbsp;<a href="https://www.r-spatial.org/r/2018/10/25/ggplot2-sf.html#fnref:1" class="reversefootnote">↩</a></p>
    </li>
  </ol>
</div>

  </div>

</article>

      </div>
    </div>
    <footer class="site-footer">

  <div class="wrapper">

    <h2 class="footer-heading">r-spatial</h2>

    <div class="footer-col-wrapper">
      <div class="footer-col footer-col-1">
        <ul class="contact-list">
          <!-- <li>r-spatial</li> -->
          <li><a href="mailto:edzer.pebesma@uni-muenster.de">edzer.pebesma@uni-muenster.de</a></li>
		      <li><a rel="license" href="http://creativecommons.org/licenses/by/4.0/"><img class="CC" alt="Creative Commons License" style="border-width:0" src="./Drawing beautiful maps programmatically with R, sf and ggplot2 — Part 1_ Basics_files/88x31.png"></a> </li>
        </ul>
      </div>

      <div class="footer-col footer-col-2">
        <ul class="social-media-list">
          
          <li>
            <a href="https://github.com/r-spatial"><span class="icon icon--github"><svg viewBox="0 0 16 16"><path fill="#828282" d="M7.999,0.431c-4.285,0-7.76,3.474-7.76,7.761 c0,3.428,2.223,6.337,5.307,7.363c0.388,0.071,0.53-0.168,0.53-0.374c0-0.184-0.007-0.672-0.01-1.32 c-2.159,0.469-2.614-1.04-2.614-1.04c-0.353-0.896-0.862-1.135-0.862-1.135c-0.705-0.481,0.053-0.472,0.053-0.472 c0.779,0.055,1.189,0.8,1.189,0.8c0.692,1.186,1.816,0.843,2.258,0.645c0.071-0.502,0.271-0.843,0.493-1.037 C4.86,11.425,3.049,10.76,3.049,7.786c0-0.847,0.302-1.54,0.799-2.082C3.768,5.507,3.501,4.718,3.924,3.65 c0,0,0.652-0.209,2.134,0.796C6.677,4.273,7.34,4.187,8,4.184c0.659,0.003,1.323,0.089,1.943,0.261 c1.482-1.004,2.132-0.796,2.132-0.796c0.423,1.068,0.157,1.857,0.077,2.054c0.497,0.542,0.798,1.235,0.798,2.082 c0,2.981-1.814,3.637-3.543,3.829c0.279,0.24,0.527,0.713,0.527,1.437c0,1.037-0.01,1.874-0.01,2.129 c0,0.208,0.14,0.449,0.534,0.373c3.081-1.028,5.302-3.935,5.302-7.362C15.76,3.906,12.285,0.431,7.999,0.431z"></path></svg>
</span><span class="username">r-spatial</span></a>

          </li>
          

          
          <li>
            <a href="https://twitter.com/edzerpebesma"><span class="icon icon--twitter"><svg viewBox="0 0 16 16"><path fill="#828282" d="M15.969,3.058c-0.586,0.26-1.217,0.436-1.878,0.515c0.675-0.405,1.194-1.045,1.438-1.809c-0.632,0.375-1.332,0.647-2.076,0.793c-0.596-0.636-1.446-1.033-2.387-1.033c-1.806,0-3.27,1.464-3.27,3.27 c0,0.256,0.029,0.506,0.085,0.745C5.163,5.404,2.753,4.102,1.14,2.124C0.859,2.607,0.698,3.168,0.698,3.767 c0,1.134,0.577,2.135,1.455,2.722C1.616,6.472,1.112,6.325,0.671,6.08c0,0.014,0,0.027,0,0.041c0,1.584,1.127,2.906,2.623,3.206 C3.02,9.402,2.731,9.442,2.433,9.442c-0.211,0-0.416-0.021-0.615-0.059c0.416,1.299,1.624,2.245,3.055,2.271 c-1.119,0.877-2.529,1.4-4.061,1.4c-0.264,0-0.524-0.015-0.78-0.046c1.447,0.928,3.166,1.469,5.013,1.469 c6.015,0,9.304-4.983,9.304-9.304c0-0.142-0.003-0.283-0.009-0.423C14.976,4.29,15.531,3.714,15.969,3.058z"></path></svg>
</span><span class="username">edzerpebesma</span></a>

			<!-- <a rel="license" href="http://creativecommons.org/licenses/by/4.0/"><img class="CC" alt="Creative Commons License" style="border-width:0" src="https://i.creativecommons.org/l/by/4.0/88x31.png"></a> -->
		  <!-- license: <a href="http://creativecommons.org/licenses/by/4.0/">CC-BY</a> -->
          </li>
          
        </ul>
      </div>

      <div class="footer-col footer-col-3">
        <p>R Spatial software blogs and ideas
</p>
      </div>
    </div>

  </div>

</footer>


    
<div id="disqus_thread" style="margin:auto; width:800px; text-align=center"><iframe id="dsq-app2486" name="dsq-app2486" allowtransparency="true" frameborder="0" scrolling="no" tabindex="0" title="Disqus" width="100%" src="./Drawing beautiful maps programmatically with R, sf and ggplot2 — Part 1_ Basics_files/saved_resource.html" style="width: 1px !important; min-width: 100% !important; border: none !important; overflow: hidden !important; height: 760px !important;" horizontalscrolling="no" verticalscrolling="no"></iframe></div>
<script>
    /**
     *  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
     *  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables
     */
    var disqus_config = function () {
        this.page.url = "https://www.r-spatial.org//r/2018/10/25/ggplot2-sf.html";
        this.page.identifier = "/r/2018/10/25/ggplot2-sf.html";
    };
    (function() {  // DON'T EDIT BELOW THIS LINE
        var d = document, s = d.createElement('script');
        s.src = '//r-spatial.disqus.com/embed.js';
        s.setAttribute('data-timestamp', +new Date());
        (d.head || d.body).appendChild(s);
    })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>




	<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-74430894-1', 'auto');
  ga('send', 'pageview');

</script>

  


<iframe style="display: none;" src="./Drawing beautiful maps programmatically with R, sf and ggplot2 — Part 1_ Basics_files/saved_resource(1).html"></iframe></body></html>