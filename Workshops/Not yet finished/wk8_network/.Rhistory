library(maptools)
library(rgeos)
# set ggplot2 theme to black and white.
theme_set(theme_bw())
world <- ne_countries(scale = "medium", returnclass = "sf")
class(world)
ggplot(data = world) +
geom_sf()
ggplot(data = world) +
geom_sf() +
xlab("Longitude") + ylab("Latitude") +
ggtitle("World map")
ggplot(data = world) +
geom_sf() +
xlab("Longitude") + ylab("Latitude") +
ggtitle("World map")
ggplot(data = world) +
geom_sf(color = "black", fill = "lightgreen")
ggplot(data = world) +
geom_sf(aes(fill = pop_est)) +
scale_fill_viridis_c(option = "plasma", trans = "sqrt")
ggplot(data = world) +
geom_sf() +
coord_sf(xlim = c(-102.15, -74.12), ylim = c(7.65, 33.97), expand = FALSE)
ggplot(data = world) +
geom_sf() +
coord_sf(xlim = c(-102.15, -74.12), ylim = c(7.65, 33.97), expand = TRUE)
ggplot(data = world) +
geom_sf(aes(fill = pop_est)) +
scale_fill_viridis_c(option = "plasma", trans = "sqrt")
ggplot(data = world) +
geom_sf()
ggplot(data = world) +
geom_sf() +
coord_sf(xlim = c(-102.15, -74.12), ylim = c(7.65, 33.97), expand = FALSE)
ggplot(data = world) +
geom_sf() +
coord_sf(xlim = c(-100, -70), ylim = c(7, 33), expand = FALSE)
ggplot(data = world) +
geom_sf() +
coord_sf(xlim = c(-102.15, -74.12), ylim = c(7.65, 33.97), expand = FALSE)
ggplot(data = world) +
geom_sf() +
ggspatial::annotation_scale(location = "bl", width_hint = 0.5) +
ggspatial::annotation_north_arrow(location = "bl", which_north = "true",
pad_x = unit(0.75, "in"), pad_y = unit(0.5, "in")) +
coord_sf(xlim = c(-102.15, -74.12), ylim = c(7.65, 33.97))
world_points<- st_centroid(world)
world_points <- cbind(world, st_coordinates(st_centroid(world$geometry)))
ggplot(data = world) +
geom_sf() +
geom_text(data= world_points,aes(x=X, y=Y, label=name),
color = "darkblue", fontface = "bold", check_overlap = FALSE) +
annotate(geom = "text", x = -90, y = 26, label = "Gulf of Mexico",
fontface = "italic", color = "grey22", size = 6) +
coord_sf(xlim = c(-102.15, -74.12), ylim = c(7.65, 33.97), expand = FALSE)
ggplot(data = world) +
geom_sf(fill= "antiquewhite") +
geom_text(data= world_points, aes(x=X, y=Y, label=name),
color = "darkblue", fontface = "bold", check_overlap = FALSE) +
annotate(geom = "text", x = -90, y = 26, label = "Gulf of Mexico",
fontface = "italic", color = "grey22", size = 6) +
ggspatial::annotation_scale(location = "bl", width_hint = 0.5) +
ggspatial::annotation_north_arrow(location = "bl", which_north = "true",
pad_x = unit(0.75, "in"), pad_y = unit(0.5, "in")) +
coord_sf(xlim = c(-102.15, -74.12), ylim = c(7.65, 33.97), expand = FALSE) +
xlab("Longitude") + ylab("Latitude") + ggtitle("Map of the Gulf of Mexico and the Caribbean Sea") +
theme(panel.grid.major = element_line(color = gray(.5), linetype = "dashed", size = 0.5),
panel.background = element_rect(fill = "aliceblue"))
ggsave("map.pdf")
ggsave("map_web.png", width = 6, height = 6, dpi = "screen")
sites <- data.frame(longitude = c(-80.144005, -80.109), latitude = c(26.479005,
26.83))
ggplot(data = world) +
geom_sf() +
geom_point(data = sites, aes(x = longitude, y = latitude), size = 4,
shape = 23, fill = "darkred") +
coord_sf(xlim = c(-88, -78), ylim = c(24.5, 33), expand = FALSE)
sites <- st_as_sf(sites, coords = c("longitude", "latitude"),
crs = 4326, agr = "identity")
ggplot(data = world) +
geom_sf() +
geom_sf(data = sites, size = 4, shape = 23, fill = "darkred") +
coord_sf(xlim = c(-88, -78), ylim = c(24.5, 33), expand = FALSE)
states <- st_as_sf(map("state", plot = FALSE, fill = TRUE))
head(states)
states <- cbind(states, st_coordinates(st_centroid(states)))
library("tools")
states$ID <- toTitleCase(states$ID)
head(states)
ggplot(data = world) +
geom_sf() +
geom_sf(data = states, fill = NA) +
geom_text(data = states, aes(X, Y, label = ID), size = 5) +
coord_sf(xlim = c(-88, -78), ylim = c(24.5, 33), expand = FALSE)
states$nudge_y <- -1
states$nudge_y[states$ID == "Florida"] <- 0.5
states$nudge_y[states$ID == "South Carolina"] <- -1.5
ggplot(data = world) +
geom_sf() +
geom_sf(data = states, fill = NA) +
geom_label(data = states, aes(X, Y, label = ID), size = 5, fontface = "bold",
nudge_y = states$nudge_y) +
coord_sf(xlim = c(-88, -78), ylim = c(24.5, 33), expand = FALSE)
counties <- st_as_sf(map("county", plot = FALSE, fill = TRUE))
counties <- subset(counties, grepl("florida", counties$ID))
counties$area <- as.numeric(st_area(counties))
head(counties)
ggplot(data = world) +
geom_sf() +
geom_sf(data = counties, fill = NA, color = gray(.5)) +
coord_sf(xlim = c(-88, -78), ylim = c(24.5, 33), expand = FALSE)
ggplot(data = world) +
geom_sf() +
geom_sf(data = counties, aes(fill = area)) +
scale_fill_viridis_c(trans = "sqrt", alpha = .4) +
coord_sf(xlim = c(-88, -78), ylim = c(24.5, 33), expand = FALSE)
flcities <- data.frame(state = rep("Florida", 5), city = c("Miami",
"Tampa", "Orlando", "Jacksonville", "Sarasota"), lat = c(25.7616798,
27.950575, 28.5383355, 30.3321838, 27.3364347), lng = c(-80.1917902,
-82.4571776, -81.3792365, -81.655651, -82.5306527))
flcities <- st_as_sf(flcities, coords = c("lng", "lat"), remove = FALSE,
crs = 4326, agr = "constant")
ggplot(data = world) +
geom_sf() +
geom_sf(data = counties, fill = NA, color = gray(.5)) +
geom_text(data = flcities, aes(x = lng, y = lat, label = city),
size = 3.9, col = "black", fontface = "bold") +
coord_sf(xlim = c(-88, -78), ylim = c(24.5, 33), expand = FALSE)
ggplot(data = world) +
geom_sf() +
geom_sf(data = counties, fill = NA, color = gray(.5)) +
geom_text_repel(data = flcities, aes(x = lng, y = lat, label = city),
fontface = "bold", nudge_x = c(1, -1.5, 2, 2, -1), nudge_y = c(0.25,
-0.25, 0.5, 0.5, -0.5)) +
coord_sf(xlim = c(-88, -78), ylim = c(24.5, 33), expand = FALSE)
ggplot(data = world) +
geom_sf(fill = "antiquewhite1") +
geom_sf(data = counties, aes(fill = area)) +
geom_sf(data = states, fill = NA) +
geom_sf(data = sites, size = 4, shape = 23, fill = "darkred") +
geom_text_repel(data = flcities, aes(x = lng, y = lat, label = city),
fontface = "bold", nudge_x = c(1, -1.5, 2, 2, -1), nudge_y = c(0.25,
-0.25, 0.5, 0.5, -0.5)) +
geom_label(data = states, aes(X, Y, label = ID), size = 5, fontface = "bold",
nudge_y = states$nudge_y) +
scale_fill_viridis_c(trans = "sqrt", alpha = .4) +
annotation_scale(location = "bl", width_hint = 0.4) +
annotation_north_arrow(location = "bl", which_north = "true",
pad_x = unit(0.75, "in"), pad_y = unit(0.5, "in"),
style = north_arrow_fancy_orienteering) +
coord_sf(xlim = c(-88, -78), ylim = c(24.5, 33), expand = FALSE) +
xlab("Longitude") + ylab("Latitude") +
ggtitle("Observation Sites", subtitle = "(2 sites in Palm Beach County, Florida)") +
theme(panel.grid.major = element_line(color = gray(0.5), linetype = "dashed",
size = 0.5), panel.background = element_rect(fill = "aliceblue"))
library("tools")
states$ID <- toTitleCase(states$ID)
head(states)
states$ID
class(states$ID)
class(as.text(states$ID))
class(as.string(states$ID))
library(tidyverse)
library(sp)
library(sf)
library(rnaturalearth)
library(ggrepel)
sales <- read_csv("data/whiskey_sales_tasmania.csv")
locations <- read_csv("data/tas_locations.csv")
# Letters per source
producers <- sales %>%
group_by(producer) %>%
count() %>%
rename(place = producer) %>%
add_column(type = "producer") %>%
ungroup()
# Letters per destination
consumers <- sales %>%
group_by(consumer) %>%
count() %>%
rename(place = consumer) %>%
add_column(type = "consumer") %>%
ungroup()
# Bind the rows of the two data frames
# and change type column to factor
letters_data <- rbind(producers, consumers) %>%
mutate(type = as_factor(type))
# Join letters_data to locations
geo_data <- left_join(letters_data, locations, by = "place")
points_sf <- st_as_sf(geo_data, coords = c("lon", "lat"), crs = 4326)
coast_sf <- ne_coastline(scale = "medium", returnclass = "sf")
countries_sf <- ne_countries(scale = "medium", returnclass = "sf")
### Basic ggplot2 plot with geom_sf()
ggplot() +
geom_sf(data = coast_sf) +
geom_sf(data = points_sf,
aes(color = type, size = n),
alpha = 0.7,
show.legend = "point") +
coord_sf(xlim = c(144, 149), ylim = c(-44, -40))
ggplot() +
geom_sf(data = coast_sf) +
geom_sf(data = points_sf,
aes(color = type, size = n),
alpha = 0.7,
show.legend = "point") +
coord_sf(xlim = c(144, 149), ylim = c(-44, -40),
datum = NA) + # removes graticules
geom_text_repel(data = locations,
aes(x = lon, y = lat, label = place)) +
labs(title = "Correspondence of Daniel van der Meulen, 1585",
size = "Letters",
color = "Type",
x = NULL,
y = NULL) +
guides(color = guide_legend(override.aes = list(size = 6))) +
theme_minimal()
### Plot map with countries (polygons) data ###
ggplot() +
geom_sf(data = countries_sf,
fill = gray(0.8), color = gray(0.7)) +
geom_sf(data = points_sf,
aes(color = type, size = n),
alpha = 0.7,
show.legend = "point") +
coord_sf(xlim = c(144, 149), ylim = c(-44, -40),
datum = NA) + # removes graticules
geom_text_repel(data = locations,
aes(x = lon, y = lat, label = place)) +
labs(title = "Whiskey sales in Tasmania \nin the 1890s",
size = "Barrels",
color = " ",
x = NULL,
y = NULL) +
guides(color = guide_legend(override.aes = list(size = 6))) +
theme_bw()
flights <- tibble::tribble(
~departure, ~staff_ID, ~destination,
"London",      734,      "Paris",
"Paris",      734,  "Barcelona",
"Paris",      734,  "Barcelona",
"Paris",      734,     "Havana",
"Paris",      734,  "Barcelona",
"Paris",      734,     "Havana",
"Paris",      734,     "Havana",
"Paris",      734,     "Havana",
"Paris",      735,  "Barcelona",
"Paris",      734,     "Havana",
"Paris",      734,     "Havana",
"Paris",      734,     "Havana",
"Paris",      734,     "Havana",
"Paris",      738,     "Havana",
"Paris",      734,     "Havana",
"Paris",      734,     "Havana",
"Barcelona",      735,     "Madrid",
"Paris",      734,     "London",
"Barcelona",      735,     "London",
"Paris",      734,     "London",
"Paris",      735,     "London",
"Paris",      738,     "London",
"Paris",      734,     "London",
"Paris",      735,     "London",
"Paris",      735,     "London",
"Paris",      735,     "London",
"Paris",      735,     "London",
"Paris",      735,     "London",
"Paris",      734,     "London",
"Barcelona",      734,     "London",
"Paris",      734,     "London",
"Barcelona",      735,     "London",
"Paris",      734,     "London",
"Paris",      735,     "London",
"Paris",      734,     "London",
"Paris",      734,     "London",
"Barcelona",      738,     "London",
"Kingston",      738,  "Barcelona",
"Paris",      734,     "London",
"Paris",      738,  "Barcelona",
"Paris",      734,     "London",
"Paris",      734,     "London",
"Paris",      734,     "London",
"Paris",      734,     "London",
"Paris",      734,     "London",
"Barcelona",      738,     "London",
"Paris",      734,     "London",
"Paris",      734,     "London",
"Paris",      734,     "London",
"Paris",      738,     "London",
"Paris",      734,     "London",
"Paris",      734,     "London"
)
# Count the number of departures per city
departures <- flights %>%
group_by(departure) %>%
count() %>%
rename(city = departure) %>%
add_column(direction = "departure") %>%
ungroup()
# Count the number of arrival flights per city
destinations <- flights %>%
group_by(destination) %>%
count() %>%
rename(city = destination) %>%
add_column(direction = "arrivals") %>%
ungroup()
travel_counts <- rbind(departures, destinations) %>% # Bind the rows of the two data frames
mutate(direction = as_factor(direction)) # and change direction column to factor
## ------- Libraries and data -----------------------------------
library(cartogram)
library(maptools)
#load the `wrld_simpl` dataset from the `maptools` package. This is just a dataset that comes with the
# package, but since is is so large they don't load it automatically in case you don't end up using it.
# this `data()` function just pulls it out and saves it as the variable name `wrld_simpl`. Then you can
# use it as if it were just an automaticallly loaded dataset.
data(wrld_simpl)
install.packages("cartogram")
## ------- Libraries and data -----------------------------------
library(cartogram)
library(maptools)
#load the `wrld_simpl` dataset from the `maptools` package. This is just a dataset that comes with the
# package, but since is is so large they don't load it automatically in case you don't end up using it.
# this `data()` function just pulls it out and saves it as the variable name `wrld_simpl`. Then you can
# use it as if it were just an automaticallly loaded dataset.
data(wrld_simpl)
## ------- normal map -------------------------------------------
# extract polygons for Africa
afr <- wrld_simpl[wrld_simpl$REGION==2,]
# visualise the region's boundaries using the inbuilt plot function in R, which gives a quick and
# simple way to visualise the vector data
plot(afr)
# examine the dataset
head(afr)
## ------- construct a cartogram ----------------------------------
# construct a cartogram using the `cartogram` package and the 2005 population
# you can ignore the warning messages.
afr_cartogram <- cartogram_cont(afr, "POP2005", itermax=5)
## ------- plot the cartogram ----------------------------------
plot(afr_cartogram)
?st_transform
# construct a cartogram using the population in 2005
afr_cartogram <- cartogram(afr, "POP2005", itermax=7)
# A basic representation
plot(afr_cartogram)
## ------- construct a cartogram ----------------------------------
# construct a cartogram using the `cartogram` package and the 2005 population
# you can ignore the warning messages.
afr_cartogram <- cartogram_cont(afr, "POP2005", itermax=5)
st_crs(afr)
st_transform(arf, crs = 23038)
st_transform(afr, crs = 23038)
head(afr)
afr
glimpse(afr)
st_transform(afr$POP2005, crs = 23038)
glimpse(afr$POP2005)
# examine the dataset
head(afr$POP2005)
countries = c('Austria', 'Belgium', 'Bulgaria', 'Cyprus', 'Czech Republic', 'Denmark', 'Estonia', 'Finland', 'France', 'Germany', 'Greece', 'Hungary', 'Iceland', 'Ireland', 'Italy', 'Latvia', 'Lithuania', 'Luxembourg', 'Malta', 'Netherlands', 'Norway', 'Poland', 'Portugal', 'Slovenia', 'Spain', 'Sweden', 'United Kingdom')
data(wrld_simpl)
mapsimple = wrld_simpl[wrld_simpl$NAME %in% countries,]
sfno <- st_as_sf(mapsimple)
st_crs(sfno)
glimpse(sfno)
glimpse(afr)
glimpse(wrld_simpl)
head(wrld_simpl)
wrld_simpl$NAME
wrld_simpl$REGION
# visualise the region's boundaries using the inbuilt plot function in R, which gives a quick and
# simple way to visualise the vector data
plot(afr)
sfno
afr
wrld_simpl[wrld_simpl$REGION==2,]
wrld_simpl[wrld_simpl$NAME %in% countries,]
afr <- st_as_sf(afr)
## ------- construct a cartogram ----------------------------------
# construct a cartogram using the `cartogram` package and the 2005 population
# you can ignore the warning messages.
afr_cartogram <- cartogram_cont(afr, "POP2005", itermax=5)
st_transform(afr, crs = 23038)
st_transform(afr, crs = 102022)
afr<-st_transform(afr, crs = 102022)
## ------- construct a cartogram ----------------------------------
# construct a cartogram using the `cartogram` package and the 2005 population
# you can ignore the warning messages.
afr_cartogram <- cartogram_cont(afr, "POP2005", itermax=5)
## ------- plot the cartogram ----------------------------------
plot(afr_cartogram)
afrproj <- st_transform(afr, crs = 102022)
## ------- construct a cartogram ----------------------------------
# construct a cartogram using the `cartogram` package and the 2005 population
# you can ignore the warning messages.
afr_cartogram <- cartogram_cont(afrproj, "POP2005", itermax=5)
## ------- plot the cartogram ----------------------------------
plot(afr_cartogram)
afrproj <- st_transform(afr, crs = 102022)
## ------- construct a cartogram ----------------------------------
# construct a cartogram using the `cartogram` package and the 2005 population
# you can ignore the warning messages.
afr_cartogram <- cartogram_cont(afrproj, "POP2005", itermax=5)
## ------- plot the cartogram ----------------------------------
plot(afr_cartogram)
afr_cartogram
afr_cartogram <- cartogram_cont(afrproj$POP2005, itermax=5)
?cartogram_cont
## ------- construct a cartogram ----------------------------------
# construct a cartogram using the `cartogram` package and the 2005 population
# you can ignore the warning messages.
afr_cartogram <- cartogram_cont(afrproj, POP2005, itermax=5)
afrproj <- st_transform(afr, crs = 102022)
## ------- construct a cartogram ----------------------------------
# construct a cartogram using the `cartogram` package and the 2005 population
# you can ignore the warning messages.
afr_cartogram <- cartogram_cont(afrproj, POP2005, itermax=5)
## ------- construct a cartogram ----------------------------------
# construct a cartogram using the `cartogram` package and the 2005 population
# you can ignore the warning messages.
afr_cartogram <- cartogram_cont(afrproj, 'POP2005', itermax=5)
## ------- plot the cartogram ----------------------------------
plot(afr_cartogram)
## ------- plot the cartogram ----------------------------------
ggplot() +
geom_sf(data = afr_cartogram, aes(fill = POP2005))
#load the `wrld_simpl` dataset from the `maptools` package. This is just a dataset that comes with the
# package, but since is is so large they don't load it automatically in case you don't end up using it.
# this `data()` function just pulls it out and saves it as the variable name `wrld_simpl`. Then you can
# use it as if it were just an automaticallly loaded dataset.
data(wrld_simpl)
## ------- normal map -------------------------------------------
# extract polygons for Africa
afr <- wrld_simpl[wrld_simpl$REGION==2,]
# visualise the region's boundaries using the inbuilt plot function in R, which gives a quick and
# simple way to visualise the vector data
plot(afr)
# examine the dataset
head(afr)
afr <- st_as_sf(afr)
afrproj <- st_transform(afr, crs = 102022)
## ------- construct a cartogram ----------------------------------
# construct a cartogram using the `cartogram` package and the 2005 population
# you can ignore the warning messages.
afr_cartogram <- cartogram_cont(afrproj, 'POP2005', itermax=5)
## ------- plot the cartogram ----------------------------------
ggplot() +
geom_sf(data = afr_cartogram, aes(fill = POP2005))
head(afr)
?st_as_sf
# visualise the region's boundaries using the inbuilt plot function in R, which gives a quick and
# simple way to visualise the vector data
plot(afr)
# visualise the region's boundaries using the inbuilt plot function in R, which gives a quick and
# simple way to visualise the vector data
plot(afr)
#load the `wrld_simpl` dataset from the `maptools` package. This is just a dataset that comes with the
# package, but since is is so large they don't load it automatically in case you don't end up using it.
# this `data()` function just pulls it out and saves it as the variable name `wrld_simpl`. Then you can
# use it as if it were just an automaticallly loaded dataset.
data(wrld_simpl)
## ------- normal map -------------------------------------------
# extract polygons for Africa
afr <- wrld_simpl[wrld_simpl$REGION==2,]
# visualise the region's boundaries using the inbuilt plot function in R, which gives a quick and
# simple way to visualise the vector data
plot(afr)
# visualise the region's boundaries using the inbuilt plot function in R, which gives a quick and
# simple way to visualise the vector data
plot(afr)
# examine the dataset
head(afr)
# Convert to a format that works with the packages and approaches we have been using
# (which is called the 'sf' format for spatial data)
afr <- st_as_sf(afr)
plot(afr)
## ------- normal map -------------------------------------------
# extract polygons for Africa
afr <- wrld_simpl[wrld_simpl$REGION==2,]
ggplot(afr)
# visualise the region's boundaries using the inbuilt plot function in R, which gives a quick and
# simple way to visualise the vector data
plot(afr)
# examine the dataset
head(afr)
# Convert to a format that works with the packages and approaches we have been using
# (which is called the 'sf' format for spatial data)
afr_sf <- st_as_sf(afr)
plot(afr_sf)
## ------- construct a cartogram ----------------------------------
# construct a cartogram using the `cartogram` package and the 2005 population
# you can ignore the warning messages.
afr_cartogram <- cartogram_cont(afr_sf, 'POP2005', itermax=5)
head(afr)
head(afr_sf)
africa
head(afr)
head(africa)
class(afr_sf)
class(afr)
library(sugarbag)
install.packages("sugarbag")
install.packages("eechinda")
library(sugarbag)
#library(eechidna)
library(magrittr)
library(eechidna)
install.packages("eechinda")
library(eechidna)
install.packages("eechinda", 1.4.0)
install.packages("eechinda", "1.4.0")
install.packages("eechinda", "1.3.0")
install.packages("eechinda")
