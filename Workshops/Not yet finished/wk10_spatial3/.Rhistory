devtools::install_github("hrbrmstr/hrbrthemes")
library(devtools)
install.packages("devtools")
install.packages("devtools")
library(devtools)
:
# Install the following and load their libraries
# If they ask you to update other packages, select 'None' or 'CRAN only'
devtools::install_github("hrbrmstr/hrbrthemes")
library(hrbrthemes)
# Install the following and load their libraries
# If you're asked to update other packages, select 'None' or 'CRAN only', and if you're asked whether you'd
# like to install packages that require compilation, select 'yes'
#devtools::install_github("hrbrmstr/hrbrthemes")
#library(hrbrthemes)
install.packages("gapminder")
library(gapminder)
# The following code creates a subset of the babynames dataset using filter().
US_names <- babynames::babynames %>%
filter(name %in% c("Mary","Emma", "Ida", "Ashley", "Amanda", "Jessica",    "Patricia", "Linda", "Deborah",   "Dorothy", "Betty", "Helen")) %>%
filter(sex=="F")
# A spaghetti plot
ggplot(US_names, aes(x=year, y=n, group=name, color=name)) +
geom_line() +
scale_color_viridis(discrete = TRUE) +
theme(plot.title = element_text(size=14)) +
ggtitle("A spaghetti chart of popular US names")
# Its a bit hard to see all the different lines, lets make it clearer and highlight one particular name, and label it:
# add a new variable (column) called highlight to the dataset using mutate()
US_names_highlight <- US_names %>%
mutate(highlight = ifelse(name=="Amanda", "Amanda", "Other"))
# Its a bit hard to see all the different lines, lets make it clearer and highlight one particular name, and label it:
# add a new variable (column) called highlight to the dataset using mutate()
US_names_highlight <- US_names %>%
mutate(highlight = ifelse(name=="Amanda", "Amanda", "Other"))
# A spaghetti plot
ggplot(US_names, aes(x=year, y=n, group=name, color=name)) +
geom_line() +
scale_color_viridis(discrete = TRUE) +
theme(plot.title = element_text(size=14)) +
ggtitle("A spaghetti chart of popular US names")
# Its a bit hard to see all the different lines, lets make it clearer and highlight one particular name, and label it:
# add a new variable (column) called highlight to the dataset using mutate()
US_names_highlight <- US_names %>%
mutate(highlight = ifelse(name=="Amanda", "Amanda", "Other"))
# Be patient! This one is a bit slow to load
ggplot(US_names_highlight, aes(x=year, y=n, group=name, color=highlight, size=highlight)) +
geom_line() +
scale_color_manual(values = c("#69b3a2", "lightgrey")) +
scale_size_manual(values=c(1.5,0.2)) +
theme(legend.position="none") +
ggtitle("Popularity of US names in the previous 30 years") +
geom_label( x=1990, y=55000, label="Amanda reached 3550\nbabies in 1970", size=4, color="#69b3a2") +
theme(plot.title = element_text(size=14))
# A faceted plot
ggplot(US_names, aes(x=year, y=n, group=name)) +
geom_line() +
ggtitle("Popularity of US names in the previous 30 years") +
facet_wrap(~name)
##### Combine approaches
# Create a new dataset called US_names_repeated, make it the same as the US_names dataset but create one more
# variable (column) called name_repeated
US_names_repeated <- US_names %>%
mutate(name_repeated=name)
ggplot(US_names_repeated, aes(x=year, y=n)) +
# first, we will plot all the name curves in grey
geom_line( data=US_names_repeated %>% dplyr::select(-name), aes(group=name_repeated), color="grey", size=0.5, alpha=0.5) +
# then, we will plot only the name from that facet in blue
geom_line( aes(color=name), color="#69b3a2", size=1.2 )+
scale_color_viridis(discrete = TRUE) +
theme(
plot.title = element_text(size=14),
panel.grid = element_blank()
) +
ggtitle("A spaghetti chart of popular US names") +
facet_wrap(~name)
## -- Pepare the data: subset, order and add a new variable to the gapminder data using the code below.
gapminder_data <- gapminder %>%
filter(year=="2007") %>%
dplyr::select(-year) %>%
mutate(pop=pop/1000000) %>%
arrange(desc(pop)) %>%
mutate(country = factor(country, country))
# use glimpse() or head() to inspect and compare gapminder with gapminder_data.
glimpse(gapminder)
glimpse(gapminder_data)
head(gapminder_data)
# Generate bubble plot
ggplot(gapminder_data, aes(x=gdpPercap, y=lifeExp, size = pop, color = continent)) +
geom_point(alpha=0.7) +
scale_size(range = c(1.4, 19), name="Population (M)") +
scale_color_viridis(discrete=TRUE, guide=FALSE) +
theme_ipsum() +
theme(legend.position="none")
# Generate bubble plot
ggplot(gapminder_data, aes(x=gdpPercap, y=lifeExp, size = pop, color = continent)) +
geom_point(alpha=0.7) +
scale_size(range = c(1.4, 19), name="Population (M)") +
scale_color_viridis(discrete=TRUE, guide=FALSE) +
theme_dark() +
theme(legend.position="none")
install.packages('hrbrthemes')
# Generate bubble plot
ggplot(gapminder_data, aes(x=gdpPercap, y=lifeExp, size = pop, color = continent)) +
geom_point(alpha=0.7) +
scale_size(range = c(1.4, 19), name="Population (M)") +
scale_color_viridis(discrete=TRUE, guide=FALSE) +
theme_ipsum() +
theme(legend.position="none")
# Generate bubble plot
ggplot(gapminder_data, aes(x=gdpPercap, y=lifeExp, size = pop, color = continent)) +
geom_point(alpha=0.7) +
scale_size(range = c(1.4, 19), name="Population (M)") +
scale_color_viridis(discrete=TRUE, guide=FALSE) +
theme_ipsum() +
theme(legend.position="none")
library(hrbrthemes)
library(hrbrthemes)
install.packages('hrbrthemes')
library(hrbrthemes)
# Generate bubble plot
ggplot(gapminder_data, aes(x=gdpPercap, y=lifeExp, size = pop, color = continent)) +
geom_point(alpha=0.7) +
scale_size(range = c(1.4, 19), name="Population (M)") +
scale_color_viridis(discrete=TRUE, guide=FALSE) +
theme_economist() +
theme(legend.position="none")
library(cowplot)
library(ggplot2)
library(ggrepel)
library(ggspatial)
library(rnaturalearth)
library(rnaturalearthdata)
library(sf)
library(maps)
library(maptools)
library(rgeos)
counties <- st_as_sf(map("county", plot = FALSE, fill = TRUE))
head(county)
counties <- subset(counties, grepl("florida", counties$ID))
counties$area <- as.numeric(st_area(counties))
head(counties)
states$geometry
remove.packages("rnaturalearth")
counties <- st_as_sf(map("county", plot = FALSE, fill = TRUE))
remove.packages("rnaturalearthdata")
remove.packages("rgeos")
counties <- st_as_sf(map("county", plot = FALSE, fill = TRUE))
remove.packages("maps")
counties <- st_as_sf(map("county", plot = FALSE, fill = TRUE))
?maps
library(maps)
?maps
## ------- Libraries and data -----------------------------------
library(cartogram)
library(maptools)
#load the `wrld_simpl` dataset from the `maptools` package. This is just a dataset that comes with the
# package, but since is is so large they don't load it automatically in case you don't end up using it.
# this `data()` function just pulls it out and saves it as the variable name `wrld_simpl`. Then you can
# use it as if it were just an automaticallly loaded dataset.
data(wrld_simpl)
## ------- normal map -------------------------------------------
# extract polygons for Africa
africa <- wrld_simpl[wrld_simpl$REGION==2,]
# visualise the region's boundaries using the inbuilt plot function in R, which gives a quick and
# simple way to visualise the vector data
plot(africa)
# examine the dataset
head(africa)
# When you examine the `africa` data, is in a very long list format. There's useful data at the top,
# but then a long list of all of the polygons we see in the figure. It's not the most useful
# data format, nor the type we are used to using throughout this unit. That's true for any
# subset of the inbuilt `wrld_simpl` data.
#
# Convert to a format that works with the packages and approaches we have been using
# (which is called the 'sf' format for spatial data)
africa_sf <- st_as_sf(africa)
## ------- Libraries and data -----------------------------------
library(cartogram)
library(maptools)
#load the `wrld_simpl` dataset from the `maptools` package. This is just a dataset that comes with the
# package, but since is is so large they don't load it automatically in case you don't end up using it.
# this `data()` function just pulls it out and saves it as the variable name `wrld_simpl`. Then you can
# use it as if it were just an automaticallly loaded dataset.
data(wrld_simpl)
## ------- normal map -------------------------------------------
# extract polygons for Africa
africa <- wrld_simpl[wrld_simpl$REGION==2,]
# visualise the region's boundaries using the inbuilt plot function in R, which gives a quick and
# simple way to visualise the vector data
plot(africa)
# examine the dataset
head(africa)
# When you examine the `africa` data, is in a very long list format. There's useful data at the top,
# but then a long list of all of the polygons we see in the figure. It's not the most useful
# data format, nor the type we are used to using throughout this unit. That's true for any
# subset of the inbuilt `wrld_simpl` data.
#
# Convert to a format that works with the packages and approaches we have been using
# (which is called the 'sf' format for spatial data)
africa_sf <- st_as_sf(africa)
library(sf)
# When you examine the `africa` data, is in a very long list format. There's useful data at the top,
# but then a long list of all of the polygons we see in the figure. It's not the most useful
# data format, nor the type we are used to using throughout this unit. That's true for any
# subset of the inbuilt `wrld_simpl` data.
#
# Convert to a format that works with the packages and approaches we have been using
# (which is called the 'sf' format for spatial data)
africa_sf <- st_as_sf(africa)
library(regeos)
library(rgeos)
install.packages("rgeos")
library(rgeos)
#load the `wrld_simpl` dataset from the `maptools` package. This is just a dataset that comes with the
# package, but since is is so large they don't load it automatically in case you don't end up using it.
# this `data()` function just pulls it out and saves it as the variable name `wrld_simpl`. Then you can
# use it as if it were just an automaticallly loaded dataset.
data(wrld_simpl)
## ------- normal map -------------------------------------------
# extract polygons for Africa
africa <- wrld_simpl[wrld_simpl$REGION==2,]
# visualise the region's boundaries using the inbuilt plot function in R, which gives a quick and
# simple way to visualise the vector data
plot(africa)
# examine the dataset
head(africa)
# When you examine the `africa` data, is in a very long list format. There's useful data at the top,
# but then a long list of all of the polygons we see in the figure. It's not the most useful
# data format, nor the type we are used to using throughout this unit. That's true for any
# subset of the inbuilt `wrld_simpl` data.
#
# Convert to a format that works with the packages and approaches we have been using
# (which is called the 'sf' format for spatial data)
africa_sf <- st_as_sf(africa)
afrproj <- st_transform(africa_sf, crs = 102022)
afrproj <- st_transform(africa_sf, crs = 102022)
afr_cartogram <- cartogram_cont(afrproj, 'POP2005', itermax=5)
## ------- plot the cartogram ----------------------------------
ggplot() +
geom_sf(data = afr_cartogram, aes(fill = POP2005))
library(ggplot)
library(ggplot2)
## ------- plot the cartogram ----------------------------------
ggplot() +
geom_sf(data = afr_cartogram, aes(fill = POP2005))
library(sugarbag)
#library(eechidna)
library(magrittr)
# What do `nat_data16` and `abs2016` contain? have a look at what variables are in the dataframe.
glimpse(nat_data16)
library(eechidna)
install.packages("eechidna")
library(eechidna)
# What do `nat_data16` and `abs2016` contain? have a look at what variables are in the dataframe.
glimpse(nat_data16)
glimpse(abs2016)
division_centroids <- nat_data16 %>%
dplyr::select(elect_div, longitude = long_c, latitude = lat_c)
nat_data16$read_this
nat_data16 <- nat_data_download(2016)
division_centroids <- nat_data16 %>%
dplyr::select(elect_div, longitude = long_c, latitude = lat_c)
grid <- create_grid(centroids = division_centroids,
hex_size = 1,
buffer_dist = 5)
hex_allocated <- allocate(centroids = division_centroids,
sf_id = "elect_div", # same column used in division_centroids
hex_grid = grid,
hex_size = 1, # same size used in create_grid
hex_filter = 10,
focal_points = capital_cities,
width = 30,
verbose = TRUE)
division_centroids$elect_div
hex_allocated <- allocate(centroids = division_centroids,
sf_id = "elect_div", # same column used in division_centroids
hex_grid = grid,
hex_size = 1, # same size used in create_grid
hex_filter = 10,
focal_points = capital_cities,
width = 30,
verbose = TRUE)
?allocate
hex_allocated <- allocate(centroids = division_centroids,
sf_id = "elect_div", # same column used in division_centroids
hex_grid = grid,
hex_size = 1, # same size used in create_grid
hex_filter = 10,
use_neighbours = division_centroids,
focal_points = capital_cities,
width = 30,
verbose = TRUE)
hex_allocated <- allocate(centroids = division_centroids,
sf_id = "elect_div", # same column used in division_centroids
hex_grid = grid,
hex_size = 1, # same size used in create_grid
hex_filter = 10,
use_neighbours = nat_data16,
focal_points = capital_cities,
width = 30,
verbose = TRUE)
hex_allocated <- allocate(centroids = division_centroids,
sf_id = "elect_div", # same column used in division_centroids
hex_grid = grid,
hex_size = 1, # same size used in create_grid
hex_filter = 10,
focal_points = capital_cities,
width = 30,
verbose = TRUE)
hex_allocated <- allocate(centroids = division_centroids,
sf_id = "elect_div", # same column used in division_centroids
hex_grid = grid,
hex_size = 1, # same size used in create_grid
hex_filter = 10,
use_neighbours = division_centroids,
focal_points = capital_cities,
width = 30,
verbose = TRUE)
hex_allocated <- allocate(centroids = division_centroids,
sf_id = "elect_div", # same column used in division_centroids
hex_grid = grid,
hex_size = 1, # same size used in create_grid
hex_filter = 10,
use_neighbours = division_centroids,
focal_points = capital_cities,
width = 30,
verbose = TRUE)
hex_allocated <- allocate(centroids = division_centroids,
sf_id = "elect_div", # same column used in division_centroids
hex_grid = grid,
hex_size = 1, # same size used in create_grid
hex_filter = 10,
use_neighbours = division_centroids$elect_div,
focal_points = capital_cities,
width = 30,
verbose = TRUE)
class(nat_data16)
LGA_CODE16
?create_centroids
# Create centroids set
centroids <- create_centroids(tas_lga, sf_id = "LGA_CODE16")
# Create hexagon location grid
data(capital_cities)
grid <- create_grid(centroids = centroids, hex_size = 0.2, buffer_dist = 1.2)
# Allocate polygon centroids to hexagon grid points
hex_allocated <- allocate(
centroids = centroids,
hex_grid = grid,
hex_size = 0.2, # same size used in create_grid
hex_filter = 10,
use_neighbours = tas_lga,
focal_points = capital_cities,
width = 30, verbose = TRUE
)
fort_hex <- fortify_hexagon(data = hex_allocated, sf_id = "LGA_CODE16", hex_size = 0.2)
plot(fort_hex)
# Find the longitude and latitude centroid for each region or area
centroids <- nat_data16 %>% select(elect_div, longitude = long_c, latitude = lat_c)
The sugarbag package operates by creating a grid of possible hexagons to allocate electorates. The buffer extends the grid beyond the geographical space, this is especially useful for densely populated coastal areas or cities, such as Brisbane and Sydney.
# Create a grid of hexagons to allocate centroids
grid <- create_grid(centroids = centroids, hex_size = 0.9, buffer_dist = 5)
The two key pieces, the centroids and the grid can be used by the allocate function.
# Allocate the centroids to the hexagon grid
# We have the same amount of rows, as individual regions
hex_allocated <- allocate(centroids = centroids,
sf_id = "elect_div",
hex_grid = grid,
hex_size = 0.9, # same size used in create_grid
hex_filter = 10,
focal_points = capital_cities,
width = 30, verbose = TRUE) # same column used in create_centroids
?allocate
# Create centroids set
centroids <- create_centroids(tas_lga, sf_id = "LGA_CODE16")
# Create hexagon location grid
data(capital_cities)
grid <- create_grid(centroids = centroids, hex_size = 0.2, buffer_dist = 1.2)
# Allocate polygon centroids to hexagon grid points
hex_allocated <- allocate(
centroids = centroids,
hex_grid = grid,
hex_size = 0.2, # same size used in create_grid
hex_filter = 10,
use_neighbours = tas_lga,
focal_points = capital_cities,
width = 30, verbose = TRUE
)
# same column used in create_centroids
# create a set of hexagon points for plotting
fort_hex <- fortify_hexagon(data = hex_allocated, sf_id = "LGA_CODE16", hex_size = 0.2)
# plot the hexagons
install.packages("raster")
install.packages("sp")
install.packages("sp")
install.packages("rgdal")
install.packages("rgdal")
library(raster)
library(sp)
library(rgdal)
library(viridis)
# load raster in an R object called 'DEM' which stands for Digital Elevation model
DEM <- raster("NEON-DS-Field-Site-Spatial-Data/SJER/DigitalTerrainModel/SJER2013_DTM.tif")
setwd("~/Dropbox/Work/000_teaching/MXB262/2020/Material/2019 10 - 3D data viz/Workshop")
# load raster in an R object called 'DEM' which stands for Digital Elevation model
DEM <- raster("NEON-DS-Field-Site-Spatial-Data/SJER/DigitalTerrainModel/SJER2013_DTM.tif")
# A raster is, at its most fundamental, a matrix of some kind of values. The values here are elevations
# (i.e. heights above sea level). We can examine a summary of the raster values:
summary(DEM)
# load raster in an R object called 'DEM' which stands for Digital Elevation model
DEM <- raster("NEON-DS-Field-Site-Spatial-Data/SJER/DigitalTerrainModel/SJER2013_DTM.tif")
DEM
# A raster is, at its most fundamental, a matrix of some kind of values. The values here are elevations
# (i.e. heights above sea level). We can examine a summary of the raster values:
summary(DEM)
# Rasters don't natively load in with the min or max pixel values already calculated.
# View the raster pixels min, max and range using the `cellStats()` function .
cellStats(DEM, min)
cellStats(DEM, max)
cellStats(DEM, range)
# If we think they will be useful, we can add them to the raster using the `setMinMax()` function.
DEM <- setMinMax(DEM)
# view new raster attributes
DEM
DEM@crs
## ---- View extent -----------------------------------------------
# Remember that extent are the boundaries of the raster file.
DEM@extent
# If you want to see the whole dataset (or, whatever R is able to print):
values(DEM)
hist(DEM, main = "Distribution of elevation values",
col = "orange",
maxpixels = 22000000)
# `plot()`
plot(DEM,
main="Digital Elevation Model, SJER")
# `image()`
image(DEM)
# Using `image()` we can also easily restrict the plot to pixels between 250 and 300m elevation
image(DEM, zlim=c(250,300))
col <- viridis(5)
image(DEM, zlim=c(250,375), main="Digital Elevation Model (DEM)", col=col)
brk <- c(250, 300, 350, 400, 450, 500)
plot(DEM, col=col, breaks=brk, main="DEM with more breaks")
## ---- Customise the legend ----------------------------------------
# First, expand right side of the image by clipping the rectangle to make room for the legend and then turn xpd off
par(xpd = FALSE, mar=c(5.1, 4.1, 4.1, 4.5))
# Second, plot w/ no legend
plot(DEM, col=col, breaks=brk, main="DEM with a Custom (but flipped) Legend", legend = FALSE)
# Third, turn xpd back on to force the legend to fit next to the plot.
par(xpd = TRUE)
# Fourth, add a legend outside of the plot
legend(par()$usr[2], 4110600,
legend = c("Pretty darn low", "Kinda low", "Not super high", "Kinda high", "Very high"),
fill = col)
# Flip the legend
# Expand right side of clipping rect to make room for the legend
par(xpd = FALSE,mar=c(5.1, 4.1, 4.1, 4.5))
#DEM with a custom legend
plot(DEM, col=col, breaks=brk, main="DEM with a Custom Legend",legend = FALSE)
#turn xpd back on to force the legend to fit next to the plot.
par(xpd = TRUE)
#add a legend - but make it appear outside of the plot
legend( par()$usr[2], 4110600,
legend = c("Very high", "Kinda high", "Not super high","Kinda low", "Pretty darn low"),
fill = rev(col))
# You can also customise the breaks and use fewer colours.
col=viridis(4)
#add breaks to the colormap (6 breaks = 5 segments)
brk <- c(200, 300, 350, 400, 500)
plot(DEM, col=col, breaks=brk, main="DEM with fewer breaks")
# multiply each pixel in the raster by 2
DEM2 <- DEM * 2
DEM2
#plot the new DEM
plot(DEM2, main="DEM with all values doubled")
#plot the DEM
plot(DEM)
#Define the extent of the crop by clicking on the plot
cropbox1 <- drawExtent()
# import tiffs for each band
band19 <- "NEON-DS-Field-Site-Spatial-Data/SJER/RGB/band19.tif"
band34 <- "NEON-DS-Field-Site-Spatial-Data/SJER/RGB/band34.tif"
band58 <- "NEON-DS-Field-Site-Spatial-Data/SJER/RGB/band58.tif"
## ---- Create r stack ---------------------------------------------------------
# create stack of stack
rgbRaster <- stack(band19,band34,band58)
# check attributes
rgbRaster
# we see the CRS, resolution, and extent of all three rasters.
# plot stack
plot(rgbRaster)
# Plot RGB version, and prepare to be amazed
plotRGB(rgbRaster,r=3,g=2,b=1, stretch = "lin")
## ---- Explore the raster data in other ways --------------------------
# View histogram of reflectance values for all rasters
hist(rgbRaster)
# define the desired extent
rgbCrop <- c(256770.7,256959,4112140,4112284)
# crop
rgbRaster_crop <- crop(rgbRaster, rgbCrop)
# view cropped stack
plot(rgbRaster_crop)
# create raster brick
rgbBrick <- brick(rgbRaster)
# check attributes
rgbBrick
# view object size
object.size(rgbBrick)
object.size(rgbRaster)
# view raster brick
plotRGB(rgbBrick,r=3,g=2,b=1, stretch = "Lin")
