setwd("~/Gitlab/viz_workshop/line_plot")
df_mn_mm_t <- read.csv("CHIRPS_monthly_precip_mm_mean.csv")
df_mn_mm_t
# use earlier created dataframes, convert the 'date' column to proper dates
df_mn_mm_t$date=as.Date(as.yearmon(as.character(df_mn_mm_t$date),format="%Y%m")) # turn first column into dates
library(zoo)
# use earlier created dataframes, convert the 'date' column to proper dates
df_mn_mm_t$date=as.Date(as.yearmon(as.character(df_mn_mm_t$date),format="%Y%m")) # turn first column into dates
df_mn_mm_t=read.zoo(df_mn_mm_t) # turn into a zoo dataframe (has advantages for doing time series calculations)
df_mn_mm_t
# For each landscape, calculate the monthly average (+sd)
precip_distribution <- data.frame(matrix(NA,ncol=14,nrow=12))
for(i in 1:7){
for(j in 1:12){
month_ave <- mean(df_mn_mm_t[as.numeric(format(index(df_mn_mm_t), '%m'))==j,i])
month_sd <- sd(df_mn_mm_t[as.numeric(format(index(df_mn_mm_t), '%m'))==j,i])
precip_distribution[j,i] <- month_ave
precip_distribution[j,i+7] <- month_sd
}
}
precip_distribution
# add column names and rows to the new data frame
names(precip_distribution)=c("L18_ave","L19_ave","L20_ave","L22_ave","L03_ave","L10_ave","L11_ave","L18_sd","L19_sd","L20_sd","L22_sd","L03_sd","L10_sd","L11_sd")
precip_distribution
# add months
precip_distribution$months=c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec")
precip_distribution$month_no=c(1,2,3,4,5,6,7,8,9,10,11,12)
df_mn_mm_t
max(df_mn_mm_t$date)
tail(df_mn_mm_t)
precip_distribution
# reorder to represent the rainy season properly (start in July)
precip_distribution_reorder <- rbind(precip_distribution[7:12,], precip_distribution[1:6,])
precip_distribution_reorder$month_no <- factor(factor(precip_distribution_reorder$month_no,
levels = c("7","8","9","10","11","12","1","2","3","4","5","6")))
# reorder to represent the rainy season properly (start in July)
precip_distribution_reorder <- rbind(precip_distribution[7:12,], precip_distribution[1:6,])
precip_distribution_reorder
# we now also need to make sure the month number become factors and that they are ordered "properly" (for our purposes)
precip_distribution_reorder$month_no <- factor(factor(precip_distribution_reorder$month_no,
levels = c("7","8","9","10","11","12","1","2","3","4","5","6")))
# make plots
precip_L18<-ggplot(precip_distribution_reorder,aes(x=month_no,y=L18_ave, group=1))+
geom_line(lwd=1)+
geom_line(aes(y=L18_ave+L18_sd),lty=2)+
geom_line(aes(y=L18_ave-L18_sd),lty=2)+
theme_classic()+
xlab("")+ylab("Precipitation (mm)")+
ggtitle("L18")+
scale_x_discrete(breaks=precip_distribution_reorder$month_no, labels=precip_distribution_reorder$months)+
scale_y_continuous(expand=c(0,0), limits = c(0,470))
# make plots
precip_L18<-ggplot(precip_distribution_reorder,aes(x=month_no,y=L18_ave, group=1))+
geom_line(lwd=1)+
geom_line(aes(y=L18_ave+L18_sd),lty=2)+
geom_line(aes(y=L18_ave-L18_sd),lty=2)+
theme_classic()+
xlab("")+ylab("Precipitation (mm)")+
ggtitle("L18")+
scale_x_discrete(breaks=precip_distribution_reorder$month_no, labels=precip_distribution_reorder$months)+
scale_y_continuous(expand=c(0,0), limits = c(0,470))
library(ggplot2)
# make plots
precip_L18<-ggplot(precip_distribution_reorder,aes(x=month_no,y=L18_ave, group=1))+
geom_line(lwd=1)+
geom_line(aes(y=L18_ave+L18_sd),lty=2)+
geom_line(aes(y=L18_ave-L18_sd),lty=2)+
theme_classic()+
xlab("")+ylab("Precipitation (mm)")+
ggtitle("L18")+
scale_x_discrete(breaks=precip_distribution_reorder$month_no, labels=precip_distribution_reorder$months)+
scale_y_continuous(expand=c(0,0), limits = c(0,470))
pdf("precip_lineplot.pdf")
precip_L18
dev.off()
library(zoo) # for working with time series
library(ggplot2)
# Load the data. This is average monthly precipitation for 7 locations in Tanzania for about 30 years (1981-2016)
df_mn_mm_t <- read.csv("CHIRPS_monthly_precip_mm_mean.csv")
head(df_mn_mm_t)
# use earlier created dataframes, convert the 'date' column to proper dates
df_mn_mm_t$date <- as.Date(as.yearmon(as.character(df_mn_mm_t$date),format="%Y%m")) # turn first column into dates
df_mn_mm_t <- read.zoo(df_mn_mm_t) # turn into a zoo dataframe (has advantages for doing time series calculations)
head(df_mn_mm_t)
# For each landscape, calculate the monthly average (+sd)
precip_distribution <- data.frame(matrix(NA,ncol=14,nrow=12))
for(i in 1:7){
for(j in 1:12){
month_ave <- mean(df_mn_mm_t[as.numeric(format(index(df_mn_mm_t), '%m'))==j,i])
month_sd <- sd(df_mn_mm_t[as.numeric(format(index(df_mn_mm_t), '%m'))==j,i])
precip_distribution[j,i] <- month_ave
precip_distribution[j,i+7] <- month_sd
}
}
head(precip_distribution)
# add column names and rows to the new data frame
names(precip_distribution)=c("L18_ave","L19_ave","L20_ave","L22_ave","L03_ave","L10_ave","L11_ave","L18_sd","L19_sd","L20_sd","L22_sd","L03_sd","L10_sd","L11_sd")
# add months and month numbers
precip_distribution$months=c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec")
precip_distribution$month_no=c(1,2,3,4,5,6,7,8,9,10,11,12)
precip_distribution
# reorder to represent the rainy season properly (start in July)
precip_distribution_reorder <- rbind(precip_distribution[7:12,], precip_distribution[1:6,])
# we now also need to make sure the month number become factors and that they are ordered "properly" (for our purposes)
precip_distribution_reorder$month_no <- factor(factor(precip_distribution_reorder$month_no,
levels = c("7","8","9","10","11","12","1","2","3","4","5","6")))
str(precip_distribution_reorder)
ggplot(precip_distribution_reorder,aes(x=month_no,y=L18_ave, group=1))+
geom_line(lwd=1)+
geom_line(aes(y=L18_ave+L18_sd),lty=2)+
geom_line(aes(y=L18_ave-L18_sd),lty=2)+
theme_classic()+
xlab("")+ylab("Precipitation (mm)")+
ggtitle("L18")+
scale_x_discrete(breaks=precip_distribution_reorder$month_no, labels=precip_distribution_reorder$months)+
scale_y_continuous(expand=c(0,0), limits = c(0,470))
ggplot(precip_distribution_reorder,aes(x=month_no,y=L18_ave))+
geom_line(lwd=1)+
geom_line(aes(y=L18_ave+L18_sd),lty=2)+
geom_line(aes(y=L18_ave-L18_sd),lty=2)+
theme_classic()+
xlab("")+ylab("Precipitation (mm)")+
ggtitle("L18")+
scale_x_discrete(breaks=precip_distribution_reorder$month_no, labels=precip_distribution_reorder$months)+
scale_y_continuous(expand=c(0,0), limits = c(0,470))
ggplot(precip_distribution_reorder,aes(x=month_no,y=L18_ave), group=1)+
geom_line(lwd=1)+
geom_line(aes(y=L18_ave+L18_sd),lty=2)+
geom_line(aes(y=L18_ave-L18_sd),lty=2)+
theme_classic()+
xlab("")+ylab("Precipitation (mm)")+
ggtitle("L18")+
scale_x_discrete(breaks=precip_distribution_reorder$month_no, labels=precip_distribution_reorder$months)+
scale_y_continuous(expand=c(0,0), limits = c(0,470))
# make plots
precip_L18<-ggplot(precip_distribution_reorder,aes(x=month_no,y=L18_ave, group=1))+
geom_line(lwd=1)+
geom_line(aes(y=L18_ave+L18_sd),lty=2)+
geom_line(aes(y=L18_ave-L18_sd),lty=2)+
theme_classic()+
xlab("")+ylab("Precipitation (mm)")+
ggtitle("L18")+
scale_x_discrete(breaks=precip_distribution_reorder$month_no, labels=precip_distribution_reorder$months)+
scale_y_continuous(expand=c(0,0), limits = c(0,470))
precip_L18
setwd("~/Gitlab/viz_workshop/radar_plot")
############ DATA VISUALIZATION ############
# R-Ladies meeting
# 28 February 2019
# Example of how to make a spider / radar plot
# By Geraldine Klarenberg
# Raw data came from www.vitalsigns.org (crop data for Tanzania) but was heavily cleaned and
# manipulated for this plotting exercise
#### set your working directory #####
# install libraries
#### package from https://github.com/ricardo-bion/ggradar (original ggradar, from CRAN does not work with R 3.3)
devtools::install_github("ricardo-bion/ggradar",
dependencies=TRUE)
# see also http://rstudio-pubs-static.s3.amazonaws.com/5795_e6e6411731bb4f1b9cc7eb49499c2082.html and
# https://github.com/ricardo-bion/ggradar/blob/master/R/ggradar.R for more instructions on the commands
### Additional info: there seems to be fairly newish packages "ggiraph" and "ggiraphExtra" (interactive), that have
# a function ggRadar. Have not yet explored this.
# load libraries
library(tidyverse)
library(ggradar)
library(cowplot) # this library contains functions to nicely combine plots in one figure, see
# https://cran.r-project.org/web/packages/cowplot/index.html
# https://cran.r-project.org/web/packages/cowplot/vignettes/introduction.html
# https://cran.r-project.org/web/packages/cowplot/vignettes/plot_grid.html etc
# Load the files with data
crops_kgha <- read.csv("crop_summary_kgha.csv")
crops_area <- read.csv("crop_summary_area.csv")
######## Make plots for the area per crop #########
# 1. This data is in 'long' format. We need it 'wide' for this plotting
crops_area <- crops_area %>%
group_by(landscape_no) %>%
spread(crop_name,area)
# 2. Turn all NAs in 0
crops_area[is.na(crops_area)] <- 0
# 3. Turn this tibble into a data frame
crops_area <- data.frame(crops_area)
# 4. Make separate data frames for the crop types
crops_area_cereals <- subset(crops_area,select=c("landscape_no","Bulrush.Millet","Finger.Millet","Sorghum","Maize","Paddy","Sesame.Simsim","Wheat"))
crops_area_roots <- subset(crops_area,select=c("landscape_no","Irish.potatoes","Sweet.Potatoes","Cassava","Onions"))
crops_area_fruitvegpulse <- subset(crops_area,select=c("landscape_no","Tomatoes","Banana","sugar.Cane","Beans","Soyabeans","Groundnut"))
# 5. Make the 3 plots
cereal_area <- ggradar(crops_area_cereals, # ggradar needs a number of specifications (that are different from ggplot)
grid.mid=30,  # set the value in the middle range of the radar
grid.max=60,  # set the outer value
group.line.width = 1, # set the width of lines that connect values on each 'spoke'
group.point.size = 2, # set the size of the points on each 'spoke'
grid.label.size=5, # set the size of labels/values along a 'spoke'
legend.text.size=9,  # set legend text size
axis.label.size=3,  # set the size of the text around the radar / spider diagram (the categories)
font.radar="Helvetica", # set the font
values.radar = c("0", "30", "60"), # define the labels (values) on each 'arm'
plot.title="Total area (ha)")+ # add the title
theme(plot.title = element_text(size=14)) + # set the text size
theme(legend.position = "bottom")
cereal_area
roots_area <- ggradar(crops_area_roots,
grid.mid=21,
grid.max=42,
group.line.width = 1,
group.point.size = 2,
grid.label.size=5,
legend.text.size=9,
axis.label.size=3,
font.radar="Helvetica",
values.radar = c("0", "21", "42"),
plot.title="Total area (ha)") +
theme(legend.position = "none") +
theme(plot.title = element_text(size=14))
roots_area
veg_area <- ggradar(crops_area_fruitvegpulse,
grid.mid=5,
grid.max=10,
group.line.width = 1,
group.point.size = 2,
grid.label.size=5,
legend.text.size=9,
axis.label.size=3,
font.radar="Helvetica",
values.radar = c("0", "5", "10"),
plot.title="Total area (ha)") +
theme(legend.position = "none") +
theme(plot.title = element_text(size=14))
######## Make plots for the kg/ha per crop #########
# 1. This data is in 'long' format. We need it 'wide' for this plotting
crops_kgha <- crops_kgha %>%
group_by(landscape_no) %>%
spread(crop_name, meankgha)
# 2. Turn all NAs in 0
crops_kgha[is.na(crops_kgha)] <- 0
# 3. Turn this tibble into a data frame
crops_kgha <- data.frame(crops_kgha)
# 4. Make separate data frames for the crop types (use subset for filtering columns)
crops_kgha_cereals <- subset(crops_kgha,select=c("landscape_no","Bulrush.Millet","Finger.Millet","Sorghum","Maize","Paddy","Sesame.Simsim","Wheat"))
crops_kgha_roots <- subset(crops_kgha,select=c("landscape_no","Irish.potatoes","Sweet.Potatoes","Cassava","Onions"))
crops_kgha_fruitvegpulse <- subset(crops_kgha,select=c("landscape_no","Tomatoes","Banana","sugar.Cane","Beans","Soyabeans","Groundnut"))
# 5. Make the 3 plots
cereal_kgha <- ggradar(crops_kgha_cereals, # ggradar needs a number of specifications (that are different from ggplot)
grid.mid=6000,  # set the value in the middle range of the radar
grid.max=12000,  # set the outer value
group.line.width = 1, # set the width of lines that connect values on each 'spoke'
group.point.size = 2, # set the size of the points on each 'spoke'
grid.label.size=5, # set the size of labels/values along a 'spoke'
legend.text.size=9,  # set legend text size
axis.label.size=3,  # set the size of the text around the radar / spider diagram (the categories)
font.radar="Helvetica", # set the font
values.radar = c("0", "6000", "12000"), # define the labels (values) on each 'arm'
plot.title="Mean yield (kg/ha)")+ # add the title
theme(legend.position = "none") +  # remove the legend; we'll add a shared legend later on
theme(plot.title = element_text(size=14)) # set the text size
roots_kgha <- ggradar(crops_kgha_roots,
grid.mid=3600,
grid.max=7200,
group.line.width = 1,
group.point.size = 2,
grid.label.size=5,
legend.text.size=9,
axis.label.size=3,
font.radar="Helvetica",
values.radar = c("0", "3600", "7200"),
plot.title="Mean yield (kg/ha)") +
theme(legend.position = "none") +
theme(plot.title = element_text(size=14))
veg_kgha <- ggradar(crops_kgha_fruitvegpulse,
grid.mid=4050,
grid.max=8100,
group.line.width = 1,
group.point.size = 2,
grid.label.size=5,
legend.text.size=9,
axis.label.size=3,
font.radar="Helvetica",
values.radar = c("0", "4050", "8100"),
plot.title="Mean yield (kg/ha)") +
theme(legend.position = "none") +
theme(plot.title = element_text(size=14))
########### Now put everything together ########
########### Now put everything together ########
# We need to extract a legend from one of the plots to add to the final product. See
# https://github.com/hadley/ggplot2/wiki/Share-a-legend-between-two-ggplot2-graphs
# Write a function to save a legend as a separate 'grob' (external graphical element, in Grid terminology),
# which you can then later combine with your plots into one figure
# NOTE: this means that you *do* have to define a legend in one of your plots, extract it, and then we'll
# hide it later on again
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
ggplot_gtable(ggplot_build(cereal_area))
# apply the function to one of your plots
mylegend <- g_legend(cereal_area)
# now use plot_grid() from cowplot to put everything together
all_plots <- plot_grid(cereal_area + theme(legend.position = "none"), # now hide the legend for this plot
roots_area,
veg_area,
cereal_kgha,
roots_kgha,
veg_kgha,
nrow=3) # define the number of rows you want
# now you have a figure with all the plots, 2 columns and 3 rows
# add the legend to the bottom of this
all_plots <- plot_grid(all_plots, # all the plots
mylegend, # the legend
nrow=2, # we want 2 rows: the plots and the legend
rel_heights=c(0.95,0.05)) # define the relative heights so the legend is not too large
pdf("cropinfo_spiderplots.pdf",height=10,width=10)
all_plots
dev.off()
