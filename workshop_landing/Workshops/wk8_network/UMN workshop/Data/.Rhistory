library(grattan)
library(dplyr)
library(tidyverse)
property <- residential_property_prices %>%
spread(City, Residential_property_price_index)
ggplot(property, aes(x = Date)) +
geom_area( aes( y = Sydney, fill = "Sydney")) +
geom_area( aes( y = Brisbane, fill = "Brisbane")) +
ylab("Residential Property Price Index")
head(residential_property_prices)
ggplot(residential_property_prices, aes(x = Date)) +
geom_area( aes( y = Brisbane, fill = "Brisbane")) +
ylab("Residential Property Price Index")
head(property)
head(residential_property_prices)
# As with any vector field, the functions for u and v can be any functional combination of x and y:
expand.grid(x=seq(from=0,to=10,length=11),
y=seq(from=0,to=10,length=11)) %>%
ggplot(aes(x=x, y=y, u=x, v=y)) +
geom_quiver()
expand.grid(x=seq(from=-10,to=10,length=21),
y=seq(from=-10,to=10,length=21)) %>%
ggplot(aes(x=x, y=y, u=x, v=y)) +
geom_quiver()
# As with any vector field, the functions for u and v can be any functional combination of x and y:
expand.grid(x=seq(from=-10,to=10,length=21),
y=seq(from=-10,to=10,length=21)) %>%
ggplot(aes(x=x, y=y, u=-x, v=-y)) +
geom_quiver()
# As with any vector field, the functions for u and v can be any functional combination of x and y:
expand.grid(x=seq(from=-10,to=10,length=21),
y=seq(from=-10,to=10,length=21)) %>%
ggplot(aes(x=x, y=y, u=-(x^2+y^2), v=-(y^2+x^2))) +
geom_quiver()
# As with any vector field, the functions for u and v can be any functional combination of x and y:
expand.grid(x=seq(from=-10,to=10,length=21),
y=seq(from=-10,to=10,length=21)) %>%
ggplot(aes(x=x, y=y, u=-x, v=-y)) +
geom_quiver()
# As with any vector field, the functions for u and v can be any functional combination of x and y:
expand.grid(x=seq(from=-10,to=10,length=11),
y=seq(from=-10,to=10,length=11)) %>%
ggplot(aes(x=x, y=y, u=-x, v=-y)) +
geom_quiver()
# As with any vector field, the functions for u and v can be any functional combination of x and y:
expand.grid(x=seq(from=-10,to=10,length=6),
y=seq(from=-10,to=10,length=6)) %>%
ggplot(aes(x=x, y=y, u=-x, v=-y)) +
geom_quiver()
rm(ls())
ls()
library(tidyverse)
library(kableExtra)
library(babynames)
install.packages("babynames")
install.packages("babynames")
library(babynames)
library(viridis)
library(DT)
install.packages("DT")
library(DT)
library(plotly)
library(gridExtra)
library(ggrepel)
install.packages("ggrepel")
library(ggrepel)
library(fmsb)
install.packages(fmsb)
install.packages("fmsb")
library(fmsb)
library(colormap)
install.packages("colormap")
library(patchwork)
install.packages("patchwork")
library(patchwork)
library(GGally)
install.packages("GGally")
library(GGally)
library(ggquiver)
devtools::install_github("hrbrmstr/hrbrthemes")
library(hrbrthemes)
install.packages("gapminder")
library(gapminder)
US_names <- babynames %>%
filter(name %in% c("Mary","Emma", "Ida", "Ashley", "Amanda", "Jessica",    "Patricia", "Linda", "Deborah",   "Dorothy", "Betty", "Helen")) %>%
filter(sex=="F")
plot_1 <- ggplot(US_names, aes(x=year, y=n, group=name, color=name)) +
geom_line() +
scale_color_viridis(discrete = TRUE) +
theme(plot.title = element_text(size=14)) +
ggtitle("A spaghetti chart of popular US names")
plot_1 <- ggplot(US_names, aes(x=year, y=n, group=name, color=name)) +
geom_line() +
scale_color_viridis(discrete = TRUE) +
theme(plot.title = element_text(size=14)) +
ggtitle("A spaghetti chart of popular US names")
US_names_highlight <- US_names %>%
mutate(highlight = ifelse(name=="Amanda", "Amanda", "Other"))
ggplot(US_names_highlight, aes(x=year, y=n, group=name, color=highlight, size=highlight)) +
geom_line() +
scale_color_manual(values = c("#69b3a2", "lightgrey")) +
scale_size_manual(values=c(1.5,0.2)) +
theme(legend.position="none") +
ggtitle("Popularity of US names in the previous 30 years") +
geom_label( x=1990, y=55000, label="Amanda reached 3550\nbabies in 1970", size=4, color="#69b3a2") +
theme(plot.title = element_text(size=14))
library(tidyverse)
library(kableExtra)
library(babynames)
library(viridis)
library(DT)
library(plotly)
library(gridExtra)
library(ggrepel)
library(fmsb)
library(colormap) # note: installing this one takes a minute or two, be patient
library(patchwork)
library(GGally)
library(ggquiver)
devtools::install_github("dill/emoGG")
ggplot(iris, aes(Sepal.Length, Sepal.Width, color = Species)) +
geom_point()
ggplot(iris, aes(Sepal.Length, Sepal.Width, color = Species)) +
geom_emoji(emoji="1f337")
library(emoGG)
ggplot(iris, aes(Sepal.Length, Sepal.Width, color = Species)) +
geom_emoji(emoji="1f337")
emoji_search("flower")
ggplot(iris, aes(Sepal.Length, Sepal.Width, color = Species)) +
geom_emoji(emoji="1f940")
set.seed(1)
grades_data <- as.data.frame(matrix( sample( 2:20 , 10 , replace=T) , ncol=10))
colnames(grades_data) <- c("maths" , "english" , "biology" , "music" , "R-coding", "data-viz" , "french" , "physics", "statistics", "sport" )
# Take a look at the format of the data we created
head(grades_data)
grades_data_2 <-as.data.frame(matrix( c( sample( 2:20 , 10 , replace=T), sample( 2:9 , 10 , replace=T)) , ncol=10, byrow=TRUE))
colnames(data) <- c("math" , "english" , "biology" , "music" , "R-coding", "data-viz" , "french" , "physic", "statistic", "sport" )
data[2,2]=19
grades_data_2 <-as.data.frame(matrix( c( sample( 2:20 , 10 , replace=T), sample( 2:9 , 10 , replace=T)) , ncol=10, byrow=TRUE))
colnames(data) <- c("math" , "english" , "biology" , "music" , "R-coding", "data-viz" , "french" , "physic", "statistic", "sport" )
data[2,2]=19
grades_data
grades_2_data
grades_data_2
colnames(grades_data_2) <- c("math" , "english" , "biology" , "music" , "R-coding", "data-viz" , "french" , "physic", "statistic", "sport" )
grades_data_2[2,2]=19
grades_data_2
grades_data <- rbind(rep(20,10) , rep(0,10) , grades_data)
grades_data
radarchart(grades_data,
title = "Spider Plot of Student Grades")
radarchart(grades_data,
title = "Spider Plot of Student Grades",
axistype=1, # specify the position of the label (select anumber between 0 and 6)
caxislabels=seq(0,20,5) # set the range of the axis labels
)
radarchart(grades_data,
title = "Spider Plot of Student Grades",
axistype=1, # axis label position (select anumber between 0 and 6)
caxislabels=seq(0,20,5),# set the range of the axis labels
pcol = "forestgreen", # polygon colour. 1 to 8, rgb code `rgb( 0.2,0.5,0.5,0.9)`, colour name
cglcol="grey" # gridline colour
)
radarchart(grades_data, axistype=1,
pcol=rgb(0.2,0.5,0.5,0.9) ,  # draw the polygon
cglcol="grey", # set the polygon colour
cglty=1, # define the line used to draw the polygon
axislabcol="grey", # define axis label colour
caxislabels=seq(0,20,5), # set the range of the axis labels
cglwd=0.8, # grid line width
vlcex=0.8, # text size of labels
pfcol=rgb(0.2,0.5,0.5,0.5)
)
grades_data_2[2,2]
grades_data_2 <-as.data.frame(matrix( c( sample( 2:20 , 10 , replace=T), sample( 2:9 , 10 , replace=T)) , ncol=10, byrow=TRUE))
colnames(grades_data_2) <- c("math" , "english" , "biology" , "music" , "R-coding", "data-viz" , "french" , "physic", "statistic", "sport" )
grades_data_2[2,2]
grades_data_2[2,2]=19
# add min and max to each subject like the first spider plot
grades_data_2 <-rbind(rep(20,10) , rep(0,10) , grades_data_2)
# Prepare polygon colours
colors_border = c(rgb(0.2,0.5,0.5,0.9), rgb(0.8,0.2,0.5,0.9))
colors_in = c(rgb(0.2,0.5,0.5,0.4), rgb(0.8,0.2,0.5,0.4))
# Custom the radarChart !
radarchart(grades_data_2, axistype=1,
#custom polygon
pcol=colors_border , pfcol=colors_in , plwd=4, plty=1 ,
#custom the grid
cglcol="grey", cglty=1, axislabcol="grey", caxislabels=seq(0,20,5), cglwd=1.1,
#custom labels
vlcex=0.8)
# add a Legend
legend(x=0.85, y=1, legend = c("Shirley", "Sonia"), bty = "n", pch=20 , col=colors_border , text.col = "black", cex=0.9, pt.cex=1.6)
# Lets have a look at the final plot to start with
ggparcoord(iris, columns = 1:4, groupColumn = 5, order = "anyClass",
scale= "globalminmax", showPoints = TRUE, title = "Parallel Coordinate Plot for the Iris Data", alphaLines = 0.3) +
scale_color_viridis(discrete=TRUE) +
theme_ipsum() +
theme(plot.title = element_text(size=10))
?theme_ipsum
library(hrbrthemes)
devtools::install_github("hrbrmstr/hrbrthemes")
library(hrbrthemes)
install.packages("stringi")
library(stringi)
ggparcoord(iris, columns = 1:4, groupColumn = 5, order = "anyClass",
scale= "globalminmax", showPoints = TRUE, title = "Parallel Coordinate Plot for the Iris Data", alphaLines = 0.3) +
scale_color_viridis(discrete=TRUE) +
#    theme_ipsum() +
theme(plot.title = element_text(size=10))
ggparcoord(iris, columns = 1:4, groupColumn = 5)
ggparcoord(iris,
columns = 1:4, groupColumn = 5, order = c(1:4),
showPoints = TRUE,
title = "Original",
alphaLines = 0.3
) +
scale_color_viridis(discrete=TRUE) +
# theme_ipsum()+
theme(
legend.position="Default",
plot.title = element_text(size=10)
) +
xlab("")
## order = "anyClass
ggparcoord(iris,
columns = 1:4, groupColumn = 5, order = "anyClass",
showPoints = TRUE,
title = "Re-ordered",
alphaLines = 0.3
) +
scale_color_viridis(discrete=TRUE) +
theme(
legend.position="none",
plot.title = element_text(size=10)
) +
xlab("")
install.packages("ggalluvial")
library(ggalluvial)
UCB <- as.data.frame(UCBAdmissions)
alluvial_0 <- ggplot(UCB, aes(y = Freq, axis1 = Gender, axis2 = Dept))
alluvial_0
alluvial_1 <- alluvial_0 + geom_alluvium(aes(fill = Admit), width = 1/12)
alluvial_1
alluvial_2 <- alluvial_1  +
geom_stratum(width = 1/12, fill = "black", color = "grey") + # adds verticle bar with grey outline and black fill.
geom_label(stat = "stratum", label.strata = TRUE) # labels the axis bars
alluvial_2
alluvial_3 <- alluvial_2 +
scale_x_discrete(limits = c("Gender", "Dept"), expand = c(.05, .05))
alluvial_3
alluvial_4 <- alluvial_3 +
scale_fill_brewer(type = "qual", palette = "Set1")
alluvial_4
expand.grid(x=seq(from=0,to=10,length=11),
y=seq(from=0,to=10,length=11)) %>%
ggplot(aes(x=x, y=y, u=x^2-y, v=x+y^2)) +
geom_quiver()
devtools::install_github("hrbrmstr/streamgraph")
babynames %>%
filter(grepl("^Kr", name)) %>%
group_by(year, name) %>%
dplyr::tally(wt = count) %>%
streamgraph("name", "n", "year")
ggplot(data, aes(x=year, y=n, group=name, fill=name)) +
geom_area() +
scale_fill_viridis(discrete = TRUE) +
ggtitle("Popularity of US names in the previous 30 years") +
theme(
panel.spacing = unit(0.1, "lines"),
strip.text.x = element_text(size = 8),
plot.title = element_text(size=14)
) +
facet_wrap(~name)
gender_pay_gap <- read.csv("https://raw.githubusercontent.com/plotly/datasets/master/school_earnings.csv")
head(gender_pay_gap)
ggplot(gender_pay_gap, aes(x=Women, y=Men, size = Gap)) +
geom_point(alpha=0.7) +
scale_size(range = c(1.4, 19), name="Gender Pay Gap") +
scale_color_viridis(discrete=TRUE, guide=FALSE) +
theme(legend.position="none")
knitr::opts_chunk$set(echo = TRUE)
gender_pay_gap <- read.csv("https://raw.githubusercontent.com/plotly/datasets/master/school_earnings.csv")
ggplot(gender_pay_gap, aes(x=Women, y=Men, size = Gap)) +
geom_point(alpha=0.7) +
scale_size(range = c(1.4, 19), name="Gender Pay Gap") +
scale_color_viridis(discrete=TRUE, guide=FALSE) +
theme(legend.position="none")
ggplot(airquality, aes(x = Solar.R, y = Wind, size = Ozone)) +
geom_point()
ggplot(CO2, aes(x = conc, y = uptake)) + geom_point() + facet_wrap(~Plant)
iris_setosa <- iris %>%
filter(Species == "setosa") %>%
select(-Species) %>%
summarise(Sepal.Length = mean(Sepal.Length),
Sepal.Width = mean(Sepal.Width),
Petal.Length = mean(Petal.Length),
Peal.Width = mean(Petal.Width))
radarchart(iris_setosa, axistype=1,
pcol=rgb(0.2,0.5,0.5,0.9) ,  # draw the polygon
cglcol="grey", # set the polygon colour
cglty=1, # define the line used to draw the polygon
axislabcol="grey", # define axis label colour
caxislabels=seq(0,20,5), # set the range of the axis labels
cglwd=0.8, # grid line width
vlcex=0.8, # text size of labels
pfcol=rgb(0.2,0.5,0.5,0.5))
iris_setosa <- rbind(rep(5.7,4) , rep(0,4) , iris_setosa)
radarchart(iris_setosa, axistype=1,
pcol=rgb(0.2,0.5,0.5,0.9) ,  # draw the polygon
cglcol="grey", # set the polygon colour
cglty=1, # define the line used to draw the polygon
axislabcol="grey", # define axis label colour
caxislabels=seq(0,20,5), # set the range of the axis labels
cglwd=0.8, # grid line width
vlcex=0.8, # text size of labels
pfcol=rgb(0.2,0.5,0.5,0.5))
ggparcoord(state.x77, columns = 2:7)
iris_setosa <- iris %>%
filter(Species == "setosa") %>%
select(-Species) %>%
summarise(Sepal.Length = mean(Sepal.Length),
Sepal.Width = mean(Sepal.Width),
Petal.Length = mean(Petal.Length),
Peal.Width = mean(Petal.Width))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
#gender_pay_gap <- read.csv("https://raw.githubusercontent.com/plotly/datasets/master/school_earnings.csv")
gender_pay_gap <- read.csv("https://raw.githubusercontent.com/plotly/datasets/master/school_earnings.csv")
gender_pay_gap <- read.csv("https://raw.githubusercontent.com/plotly/datasets/master/school_earnings.csv")
head(gender_pay_gap)
iris_setosa <- iris %>%
filter(Species == "setosa") %>%
select(-Species) %>%
summarise(Sepal.Length = mean(Sepal.Length),
Sepal.Width = mean(Sepal.Width),
Petal.Length = mean(Petal.Length),
Peal.Width = mean(Petal.Width))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
iris_setosa <- iris %>%
filter(Species == "setosa") %>%
select(-Species) %>%
summarise(Sepal.Length = mean(Sepal.Length),
Sepal.Width = mean(Sepal.Width),
Petal.Length = mean(Petal.Length),
Peal.Width = mean(Petal.Width))
setwd("~/Dropbox/Work/000_teaching/MXB262/MXB262 2019 materials/Material/7 - Visualising network data/Workshop/UMN workshop")
library(readr)
library(dplyr)
Nodes <- read_csv("CSMweb_Nodes.csv")
ES = read_csv("CSM_ES.csv")
Nodes.new = read.csv("NewCSM_Nodes.csv", header=T, as.is=T)
Edges = read.csv("CSMweb_Links.csv", header=T)
setwd("~/Dropbox/Work/000_teaching/MXB262/MXB262 2019 materials/Material/7 - Visualising network data/Workshop/UMN workshop/Data")
Nodes <- read_csv("CSMweb_Nodes.csv")
setwd("~/Dropbox/Work/000_teaching/MXB262/MXB262 2019 materials/Material/7 - Visualising network data/Workshop/UMN workshop/Data")
library(igraph) library(EpiContactTrace) library(RColorBrewer) library(ggplot2)
library(igraph); library(EpiContactTrace); library(RColorBrewer); library(ggplot2)
install.packages("EpiContactTrace")
library(EpiContactTrace)
library(RColorBrewer)
library(ggplot2)
load(file.choose())
load(file.choose())
load(file.choose())
?load
test<-load(file.choose())
test
read.csv(file.choose(),strings.As.Factors=F)
read.csv(Edgelist_farms)
read.csv("Edgelist_farms")
read.csv("Edgelist_farms.csv")
farm_edges<-read.csv("Edgelist_farms.csv")
head(farm_edges)
farm_attr<-read.csv("attr_farms.csv")
head(farm_attr)
head(edges)
edges<-farm_edges
net <- graph.data.frame(edges,directed=T)
net
net
igraph(net)
head(farm_attr
)
attr1<-farm_attr
head(attr1)
head(attr1)
V(net)$type <- as.character(attr1$type[match(V(net)$name,attr1$farm.id)])
net
V(net)$farm.size <- attr1$size[match(V(net)$name,attr1$farm.id)]
V(net)$color <- V(net)$type
V(net)$color <- gsub("Breeding","navy",V(net)$color)
V(net)$color <- gsub("Complete cycle","magenta2",V(net)$color)
V(net)$color <- gsub("Growing","green4",V(net)$color)
V(net)$color <- gsub("Fattening","steelblue1",V(net)$color)
V(net)$color <- gsub("Dairy","darkgoldenrod1",V(net)$color)
V(net)$color <- gsub("Small farm","mediumpurple",V(net)$color)
plot.igraph(simplify(net),
layout=layout.fruchterman.reingold,
vertex.label=NA,
vertex.color=V(net)$color,
vertex.size=10,
edge.arrow.size=.5)
legend("bottomleft",
legend=c("Breeding","Growing","Complete cycle","Fattening","Dairy","Small farm"),
col=c("navy","green4","magenta2","steelblue1","darkgoldenrod1","mediumpurple"),
pch=19,cex=1,bty="n")
plot.igraph(simplify(net),
layout=layout.fruchterman.reingold,
vertex.label=NA,
vertex.color=V(net)$color,
vertex.size=10,
edge.arrow.size=.5)
plot.igraph(simplify(net),
layout=layout.fruchterman.reingold,
vertex.label=NA,
vertex.color=V(net)$color,
vertex.size=10,
edge.arrow.size=.5)
plot.igraph(simplify(net),
layout=layout.fruchterman.reingold,
vertex.label=NA,
vertex.color=V(net)$color,
vertex.size=10,
edge.arrow.size=.5)
plot.igraph(simplify(net),
layout=layout.fruchterman.reingold,
vertex.label=NA,
vertex.color=V(net)$color,
vertex.size=10,
edge.arrow.size=.5)
plot.igraph(simplify(net),
layout=layoutkamada.kawai,
vertex.label=NA,
vertex.color=V(net)$color,
vertex.size=10,
edge.arrow.size=.5)
plot.igraph(simplify(net),
layout=layout.kamada.kawai,
vertex.label=NA,
vertex.color=V(net)$color,
vertex.size=10,
edge.arrow.size=.5)
e2 <- subset(edges,batch.size>50)
net.c <- graph.data.frame(e2)
V(net.c)$farm.size <- (attr1$size[match(V(net.c)$name,attr1$farm.id)]  )
V(net.c)$type <- as.character(attr1$type[match(V(net.c)$name,attr1$farm.id)]  )
V(net.c)$color <- V(net.c)$type
V(net.c)$color <- gsub("Breeding","navy",V(net.c)$color)
V(net.c)$color <- gsub("Complete cycle","magenta2",V(net.c)$color)
V(net.c)$color <- gsub("Growing","green4",V(net.c)$color)
V(net.c)$color <- gsub("Fattening","steelblue1",V(net.c)$color)
V(net.c)$color <- gsub("Dairy","darkgoldenrod1",V(net.c)$color)
V(net.c)$color <- gsub("Small farm","mediumpurple",V(net.c)$color)
plot.igraph(simplify(net.c),
layout=layout.fruchterman.reingold,
vertex.label=NA,
vertex.color=V(net.c)$color,
vertex.size=10,
edge.arrow.size=.3)
net3 <- graph.neighborhood(net,2,nodes=4) #find the second-order neighborhood of node # 4
net3
net3 <- net3[[1]]
V(net3)$shape <- "circle"
V(net3)$shape[V(net3)$name==4] <- "square"
plot.igraph(net3,
vertex.color=V(net3)$color,
vertex.label.color="white",
vertex.shape=V(net3)$shape,
vertex.size=25,
vertex.shape=V(net3)$shape,
edge.arrow.size=.5,
layout=layout.fruchterman.reingold)
degree(net3,mode="out
)
degree(net3,mode="out")
net4 <- simplify(net3)
degree(net4,mode="out")
net4 <- simplify(net3)
degree(net4,mode="out
betweenness(net4)
closeness(net4
)
betweenness(net4,normalized=T)
data <- data.frame(name=V(net4)$name,
in.deg = degree(net4,mode="in"),
out.deg = degree(net4,mode="out"),
betw = betweenness(net4),
size = V(net4)$farm.size)
data
shortest.paths(net4,v="5",to="4",mode="out")
v.list <- c("15","17","8","9")
shortest.paths(net4,v= v.list,to= v.list,mode="in")
v.list <- c("15","17","8","9")
shortest.paths(net4,v= v.list,to= v.list,mode="in")
s<- <- shortest.paths(net4,mode="in")
s <- shortest.paths(net4,mode="in")
s
library(reshape2) s1 <- melt(s) head(s1)
library(reshape2); s1 <- melt(s); head(s1)
install.packages("reshape2")
library(reshape2); s1 <- melt(s); head(s1)
library(GGally)
library(network); library(sna); library(ggplot2); library(intergraph)
install.packages("network")
library(network); library(sna); library(ggplot2); library(intergraph)
install.packages("sna")
library(network); library(sna); library(ggplot2); library(intergraph)
install.packages(statnet.common)
install.packages("statnet.common")
